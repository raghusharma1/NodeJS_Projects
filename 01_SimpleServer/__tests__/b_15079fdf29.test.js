// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Testing function b', () => {
  let mockData;
  
  beforeEach(() => {
    mockData = jest.fn();
    global.a = jest.fn(() => ({
      each: jest.fn((callback) => callback()),
      data: mockData,
      scrollTop: jest.fn(),
    }));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });
  
  test('b should call each function and set new data', () => {
    const mockC = jest.fn();
    global.c = mockC;
    mockData.mockReturnValueOnce(undefined);
    const mockNewC = { test: 'test' };
    mockC.mockReturnValueOnce(mockNewC);
    
    const result = b('test');
    
    expect(a().each).toHaveBeenCalled();
    expect(mockData).toHaveBeenCalledWith('bs.affix');
    expect(mockC).toHaveBeenCalledWith(expect.any(Function), 'test');
    expect(mockData).toHaveBeenCalledWith('bs.affix', mockNewC);
    expect(result).toBe(a());
  });
  
  test('b should call each function and call function on existing data', () => {
    const mockE = { test: jest.fn() };
    mockData.mockReturnValueOnce(mockE);
    
    const result = b('test');
    
    expect(a().each).toHaveBeenCalled();
    expect(mockData).toHaveBeenCalledWith('bs.affix');
    expect(mockE.test).toHaveBeenCalled();
    expect(result).toBe(a());
  });
});
