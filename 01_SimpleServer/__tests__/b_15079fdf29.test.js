// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap minified function test', () => {
    let a, c, d, e, f, g, h, i, j, n, o, p, r;

    beforeEach(() => {
        a = jest.fn();
        c = jest.fn();
        d = { data: jest.fn() };
        e = { new: jest.fn() };
        f = jest.fn();
        g = jest.fn();
        h = jest.fn();
        i = jest.fn();
        j = jest.fn();
        n = jest.fn();
        o = jest.fn();
        p = jest.fn();
        r = jest.fn();
    });

    test('should call each method with the function', () => {
        const eachMock = jest.fn();
        a.mockReturnValue({ each: eachMock });
        b('test');
        expect(eachMock).toHaveBeenCalledWith(expect.any(Function));
    });

    test('should create new instance if not exists', () => {
        const eachMock = jest.fn();
        a.mockReturnValue({ each: eachMock });
        d.data.mockReturnValue(undefined);
        b('test');
        const callback = eachMock.mock.calls[0][0];
        callback.call({ data: jest.fn().mockReturnValue(d) });
        expect(e.new).toHaveBeenCalledWith(expect.any(Object), 'test');
    });

    test('should not create new instance if already exists', () => {
        const eachMock = jest.fn();
        a.mockReturnValue({ each: eachMock });
        d.data.mockReturnValue(e);
        b('test');
        const callback = eachMock.mock.calls[0][0];
        callback.call({ data: jest.fn().mockReturnValue(d) });
        expect(e.new).not.toHaveBeenCalled();
    });

    test('should call the method if string is passed', () => {
        const eachMock = jest.fn();
        a.mockReturnValue({ each: eachMock });
        d.data.mockReturnValue(e);
        e['test'] = jest.fn();
        b('test');
        const callback = eachMock.mock.calls[0][0];
        callback.call({ data: jest.fn().mockReturnValue(d) });
        expect(e['test']).toHaveBeenCalled();
    });
});
