// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap minified function test', () => {
    let a;

    beforeEach(() => {
        a = jest.fn();
    });

    test('Input of type object', () => {
        const input = { key: 'value' };
        a.mockReturnValue({
            each: jest.fn().mockImplementation((fn) => {
                fn();
            }),
            data: jest.fn().mockReturnValue({
                'bs.affix': undefined
            })
        });
        expect(b(input)).toEqual(a(input));
        expect(a).toHaveBeenCalledWith(input);
    });

    test('Input of type string', () => {
        const input = 'string';
        const mockAffix = {
            'bs.affix': jest.fn()
        };
        a.mockReturnValue({
            each: jest.fn().mockImplementation((fn) => {
                fn();
            }),
            data: jest.fn().mockReturnValue(mockAffix)
        });
        expect(b(input)).toEqual(a(input));
        expect(a).toHaveBeenCalledWith(input);
        expect(mockAffix['bs.affix']).toHaveBeenCalled();
    });

    test('Input of other type', () => {
        const input = 123;
        const mockAffix = {
            'bs.affix': undefined
        };
        a.mockReturnValue({
            each: jest.fn().mockImplementation((fn) => {
                fn();
            }),
            data: jest.fn().mockReturnValue(mockAffix)
        });
        expect(b(input)).toEqual(a(input));
        expect(a).toHaveBeenCalledWith(input);
    });

    test('Input is null', () => {
        const input = null;
        const mockAffix = {
            'bs.affix': undefined
        };
        a.mockReturnValue({
            each: jest.fn().mockImplementation((fn) => {
                fn();
            }),
            data: jest.fn().mockReturnValue(mockAffix)
        });
        expect(b(input)).toEqual(a(input));
        expect(a).toHaveBeenCalledWith(input);
    });
});
