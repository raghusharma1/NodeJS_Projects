// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap minified function test', () => {
  
  beforeEach(() => {
    // Reset the data values before each test
    a = null;
    c = null;
    d = null;
    e = null;
    f = null;
  });

  test('should properly execute the function with a string parameter', () => {
    const param = 'bs.affix';
    const result = b(param);

    expect(result).toBeDefined();
    expect(typeof result).toBe('object');
  });

  test('should properly execute the function with an object parameter', () => {
    const param = { 'bs.affix': true };
    const result = b(param);

    expect(result).toBeDefined();
    expect(typeof result).toBe('object');
  });

  test('should return undefined if a non-string and non-object parameter is passed', () => {
    const param = 123;
    const result = b(param);

    expect(result).toBeUndefined();
  });

  test('should handle the scenario when "bs.affix" data is not set', () => {
    const param = 'bs.affix';
    d = { data: jest.fn(() => false) }; // Mock the data function to return false

    const result = b(param);

    expect(result).toBeDefined();
    expect(d.data).toHaveBeenCalled();
    expect(typeof result).toBe('object');
  });

  test('should handle the scenario when "bs.affix" data is already set', () => {
    const param = 'bs.affix';
    d = { data: jest.fn(() => true) }; // Mock the data function to return true

    const result = b(param);

    expect(result).toBeDefined();
    expect(d.data).toHaveBeenCalled();
    expect(typeof result).toBe('object');
  });
});
