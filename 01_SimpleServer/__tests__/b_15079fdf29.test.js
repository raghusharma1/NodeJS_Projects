// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = { data: jest.fn() };
    e = { new: jest.fn(), b: jest.fn() };
    f = 'string';
    
    a.mockReturnValue(d);
    d.data.mockReturnValue(e);
  });

  test('Should create new instance if e is undefined', () => {
    d.data.mockReturnValueOnce(undefined);

    const result = b(f);

    expect(a).toBeCalledWith(this);
    expect(d.data).toBeCalledWith('bs.affix');
    expect(e.new).toBeCalledWith(this, f);
    expect(d.data).toBeCalledWith('bs.affix', e.new(this, f));
    expect(result).toBe(this);
  });

  test('Should call e.b if b is a string', () => {
    const result = b(f);

    expect(a).toBeCalledWith(this);
    expect(d.data).toBeCalledWith('bs.affix');
    expect(e.b).toBeCalled();
    expect(result).toBe(this);
  });

  test('Should not call e.b if b is not a string', () => {
    f = {};

    const result = b(f);

    expect(a).toBeCalledWith(this);
    expect(d.data).toBeCalledWith('bs.affix');
    expect(e.b).not.toBeCalled();
    expect(result).toBe(this);
  });
});
