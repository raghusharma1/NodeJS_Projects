// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap minified function test', () => {
    let a, c, d, e, f, g, h, i, j, n, o, p, r;

    beforeEach(() => {
        a = jest.fn();
        c = jest.fn();
        d = { data: jest.fn() };
        e = { data: jest.fn() };
        f = jest.fn();
        g = jest.fn();
        h = jest.fn();
        i = jest.fn();
        j = jest.fn();
        n = jest.fn();
        o = jest.fn();
        p = jest.fn();
        r = jest.fn();
    });

    test('should call the function with the provided parameters', () => {
        const param = 'test';
        b(param);
        expect(a).toHaveBeenCalledWith(param);
        expect(c).toHaveBeenCalledWith(param);
        expect(d.data).toHaveBeenCalledWith("bs.affix");
        expect(e.data).toHaveBeenCalledWith("bs.affix");
        expect(f).toHaveBeenCalledWith(param);
    });

    test('should handle the case when the function is called with an object', () => {
        const param = { key: 'value' };
        b(param);
        expect(a).toHaveBeenCalledWith(param);
        expect(c).toHaveBeenCalledWith(param);
        expect(d.data).toHaveBeenCalledWith("bs.affix");
        expect(e.data).toHaveBeenCalledWith("bs.affix");
        expect(f).toHaveBeenCalledWith(param);
    });

    test('should handle the case when the function is called with a string', () => {
        const param = 'string';
        b(param);
        expect(a).toHaveBeenCalledWith(param);
        expect(c).toHaveBeenCalledWith(param);
        expect(d.data).toHaveBeenCalledWith("bs.affix");
        expect(e.data).toHaveBeenCalledWith("bs.affix");
        expect(f).toHaveBeenCalledWith(param);
    });
});
