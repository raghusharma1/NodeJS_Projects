// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = { data: jest.fn() };
    e = { new: jest.fn() };
    f = { b: jest.fn() };
    
    // Mock the 'this' context
    globalThis.each = jest.fn((callback) => callback());
    globalThis.a = a;
    globalThis.d = d;
    globalThis.e = e;
    globalThis.f = f;
  });
  
  afterEach(() => {
    jest.clearAllMocks();
  });

  test('Should invoke each function on this', () => {
    b('test');
    expect(globalThis.each).toHaveBeenCalled();
  });

  test('Should invoke a function with this as argument', () => {
    b('test');
    expect(a).toHaveBeenCalledWith(globalThis);
  });

  test('Should invoke data function on d with "bs.affix" as argument', () => {
    b('test');
    expect(d.data).toHaveBeenCalledWith('bs.affix');
  });

  test('Should create new e if e does not exist', () => {
    d.data.mockReturnValueOnce(null);
    b('test');
    expect(e.new).toHaveBeenCalledWith(globalThis, 'test');
  });

  test('Should not create new e if e already exists', () => {
    d.data.mockReturnValueOnce({});
    b('test');
    expect(e.new).not.toHaveBeenCalled();
  });

  test('Should invoke b function on e if b is a string', () => {
    b('test');
    expect(f.b).toHaveBeenCalled();
  });

  test('Should not invoke b function on e if b is not a string', () => {
    b({});
    expect(f.b).not.toHaveBeenCalled();
  });
});
