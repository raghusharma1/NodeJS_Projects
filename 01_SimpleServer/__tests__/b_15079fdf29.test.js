// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = { data: jest.fn() };
    e = { new: jest.fn() };
    f = { b: jest.fn() };
    
    // Mock 'this' context
    this = {
      each: jest.fn((callback) => callback())
    };
    
    // Mock 'a' function to return 'd'
    a.mockReturnValue(d);
    
    // Mock 'd.data' to return 'e'
    d.data.mockReturnValue(e);
    
    // Mock 'e.new' to return 'f'
    e.new.mockReturnValue(f);
  });
  
  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should execute each function once', () => {
    b.call(this, 'bs.affix');
    expect(this.each).toHaveBeenCalledTimes(1);
  });

  test('should execute data function with correct argument', () => {
    b.call(this, 'bs.affix');
    expect(d.data).toHaveBeenCalledWith('bs.affix');
  });

  test('should execute new function with correct argument', () => {
    b.call(this, 'someString');
    expect(e.new).toHaveBeenCalledWith(this, 'someString');
  });

  test('should execute b function when input is string', () => {
    b.call(this, 'someString');
    expect(f.b).toHaveBeenCalled();
  });

  test('should not execute b function when input is not string', () => {
    b.call(this, {});
    expect(f.b).not.toHaveBeenCalled();
  });
});
