// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Importing the dependencies
const a = require('../js/bootstrap.min.js');

// Test suite
describe('Test suite for bootstrap.min.js', () => {

  // Before each test case
  beforeEach(() => {
    a.data = jest.fn();
  });

  // Test case 1
  test('should call "each" function with a function as argument', () => {
    const eachMockFn = jest.fn();
    a.each = eachMockFn;

    a.b('test');
    
    expect(eachMockFn).toHaveBeenCalled();
    expect(typeof eachMockFn.mock.calls[0][0]).toBe('function');
  });

  // Test case 2
  test('should call "data" function with "bs.affix" as argument and "new c" function with "this" and "f" as arguments when "e" is not defined', () => {
    a.data.mockReturnValueOnce(undefined);
    const newCMockFn = jest.fn();
    a.c = newCMockFn;

    a.b('test');

    expect(a.data).toHaveBeenCalledWith('bs.affix');
    expect(newCMockFn).toHaveBeenCalledWith(expect.anything(), 'test');
  });

  // Test case 3
  test('should call "e.b" function when "b" is a string', () => {
    a.data.mockReturnValueOnce({});
    const bMockFn = jest.fn();
    a.e = {b: bMockFn};

    a.b('test');

    expect(bMockFn).toHaveBeenCalled();
  });
});
