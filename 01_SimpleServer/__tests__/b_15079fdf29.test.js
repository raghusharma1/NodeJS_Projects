// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Importing the dependencies
const a = require('../js/bootstrap.min.js').a;
const c = require('../js/bootstrap.min.js').c;

// Test suite for the method b
describe('Testing function b', () => {
  
  // Test case 1: When b is an object
  test('When b is an object', () => {
    const b = { prop: 'value' };
    const instance = { each: jest.fn() };
    const d = { data: jest.fn() };
    a.mockReturnValueOnce(d);
    c.mockReturnValueOnce('new c instance');
    const result = b(instance);
    expect(instance.each).toHaveBeenCalled();
    expect(d.data).toHaveBeenCalledWith('bs.affix', 'new c instance');
    expect(result).toBe(instance);
  });

  // Test case 2: When b is a string
  test('When b is a string', () => {
    const b = 'string';
    const instance = { each: jest.fn() };
    const d = { data: jest.fn() };
    const e = { [b]: jest.fn() };
    a.mockReturnValueOnce(d);
    d.data.mockReturnValueOnce(e);
    const result = b(instance);
    expect(instance.each).toHaveBeenCalled();
    expect(d.data).toHaveBeenCalledWith('bs.affix');
    expect(e[b]).toHaveBeenCalled();
    expect(result).toBe(instance);
  });

  // Test case 3: When b is not an object or a string
  test('When b is not an object or a string', () => {
    const b = 123;
    const instance = { each: jest.fn() };
    const d = { data: jest.fn() };
    a.mockReturnValueOnce(d);
    const result = b(instance);
    expect(instance.each).toHaveBeenCalled();
    expect(d.data).toHaveBeenCalledWith('bs.affix', undefined);
    expect(result).toBe(instance);
  });
});
