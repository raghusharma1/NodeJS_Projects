// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap min function b', () => {
  let input;
  let output;

  beforeEach(() => {
    input = {
      each: jest.fn().mockImplementation((fn) => {
        fn();
        return input;
      }),
      data: jest.fn(),
    };
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  test('should call each function with a function as argument', () => {
    b.call(input, output);
    expect(input.each).toHaveBeenCalled();
    expect(typeof input.each.mock.calls[0][0]).toBe('function');
  });

  test('should call data function with "bs.affix" as argument', () => {
    const fn = jest.fn();
    input.data.mockReturnValueOnce({}).mockReturnValueOnce(fn);
    b.call(input, output);
    expect(input.data).toHaveBeenCalledWith('bs.affix');
  });

  test('should call new function if data returns undefined', () => {
    input.data.mockReturnValueOnce(undefined);
    const fn = jest.fn();
    output = fn;
    b.call(input, output);
    expect(fn).toHaveBeenCalled();
  });

  test('should call function with string if data returns function', () => {
    const fn = jest.fn();
    input.data.mockReturnValueOnce(fn).mockReturnValueOnce(fn);
    output = 'string';
    b.call(input, output);
    expect(fn).toHaveBeenCalledWith(output);
  });
});
