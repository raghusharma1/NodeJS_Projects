// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Importing required modules
const bootstrap = require('../js/bootstrap.min');

// Test suite
describe('Bootstrap Affix Functionality', () => {
  let element;
  let data;

  // Set up before each test
  beforeEach(() => {
    element = {
      data: jest.fn().mockImplementation((key, value) => {
        if (value) {
          data = value;
        }
        return data;
      }),
      each: jest.fn().mockImplementation((fn) => {
        fn();
        return element;
      })
    };
  });

  // Test case 1: Check if "each" function is called on the element
  test('should call each function on element', () => {
    bootstrap.b.call(element);
    expect(element.each).toHaveBeenCalled();
  });

  // Test case 2: Check if "data" function is called on the element with correct parameters
  test('should call data function on element with "bs.affix" and new instance of c', () => {
    const c = jest.fn();
    bootstrap.b.call(element, c);
    expect(element.data).toHaveBeenCalledWith('bs.affix', expect.anything());
  });

  // Test case 3: Check if "data" function is called on the element with "bs.affix" and without any instance of c
  test('should call data function on element with "bs.affix" without any instance of c', () => {
    bootstrap.b.call(element);
    expect(element.data).toHaveBeenCalledWith('bs.affix');
  });

  // Test case 4: Check if "b" function is called on the instance of c
  test('should call b function on instance of c', () => {
    const c = jest.fn().mockImplementation(() => ({ b: jest.fn() }));
    const instance = new c();
    bootstrap.b.call(element, instance);
    expect(instance.b).toHaveBeenCalled();
  });
});
