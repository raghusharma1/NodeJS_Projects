// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Testing b function in bootstrap.min.js', () => {
  let mockDataMethod;
  let mockEachMethod;
  let mockObject;

  beforeAll(() => {
    mockDataMethod = jest.fn();
    mockEachMethod = jest.fn((func) => func());
    mockObject = { data: mockDataMethod, each: mockEachMethod };
  });

  beforeEach(() => {
    mockDataMethod.mockClear();
    mockEachMethod.mockClear();
  });

  test('b function should call each method of input', () => {
    b.call(mockObject);
    expect(mockEachMethod).toHaveBeenCalled();
  });

  test('b function should call data method of input with "bs.affix"', () => {
    b.call(mockObject);
    expect(mockDataMethod).toHaveBeenCalledWith('bs.affix');
  });

  test('b function should call data method of input with "bs.affix" and new object when e is undefined', () => {
    mockDataMethod.mockReturnValueOnce(undefined);
    b.call(mockObject, {});
    expect(mockDataMethod).toHaveBeenCalledWith('bs.affix', expect.any(Object));
  });

  test('b function should call e[b] when b is string and e is not undefined', () => {
    const mockFunc = jest.fn();
    mockDataMethod.mockReturnValueOnce({ test: mockFunc });
    b.call(mockObject, 'test');
    expect(mockFunc).toHaveBeenCalled();
  });
});
