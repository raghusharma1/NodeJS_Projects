// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min.js'); // Adjust this path according to your project structure

describe('Function b test suite', () => {
  
  let data;
  
  beforeEach(() => {
    data = {
      each: jest.fn(),
      data: jest.fn(),
    };
  });

  test('should call each function with provided function', () => {
    const input = {};
    b.call(data, input);

    expect(data.each).toHaveBeenCalled();
    expect(data.each.mock.calls[0][0]).toBeInstanceOf(Function);
  });

  test('should create new c with this and f and assign it to e if e is not defined', () => {
    const input = {};
    const c = jest.fn();
    global.c = c; // Mocking the global function c
    data.data.mockReturnValueOnce(undefined);

    b.call(data, input);

    expect(c).toHaveBeenCalledWith(data, input);
  });

  test('should call function e[b] if b is a string', () => {
    const input = 'test';
    const e = { test: jest.fn() };
    data.data.mockReturnValueOnce(e);
    
    b.call(data, input);

    expect(e.test).toHaveBeenCalled();
  });

  afterEach(() => {
    jest.resetAllMocks();
  });
});
