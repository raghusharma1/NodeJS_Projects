// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap Affix Method', () => {
  let input;
  let output;

  beforeEach(() => {
    input = {
      each: jest.fn().mockImplementation((fn) => {
        fn();
        return input;
      }),
      data: jest.fn(),
    };
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  test('should call each method with a function', () => {
    b(input);
    expect(input.each).toHaveBeenCalled();
    expect(typeof input.each.mock.calls[0][0]).toBe('function');
  });

  test('should call data method with "bs.affix"', () => {
    b(input);
    expect(input.data).toHaveBeenCalledWith('bs.affix');
  });

  test('should assign new object to e when e is not defined', () => {
    input.data.mockReturnValueOnce(undefined);
    b(input);
    const functionPassedToEach = input.each.mock.calls[0][0];
    functionPassedToEach();
    expect(input.data).toHaveBeenCalledWith('bs.affix', expect.any(Object));
  });

  test('should call e[b] when b is a string and e is defined', () => {
    const e = { test: jest.fn() };
    input.data.mockReturnValueOnce(e);
    b(input, 'test');
    const functionPassedToEach = input.each.mock.calls[0][0];
    functionPassedToEach();
    expect(e.test).toHaveBeenCalled();
  });
});
