// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let data;

  beforeEach(() => {
    data = {
      'bs.affix': null
    };

    global.a = jest.fn().mockReturnValue({
      data: jest.fn().mockReturnValue(data),
      each: jest.fn().mockImplementation((callback) => callback())
    });

    global.c = jest.fn().mockImplementation(() => ({
      data: jest.fn().mockReturnValue(data)
    }));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should create a new c instance if bs.affix data is not defined', () => {
    const input = {};
    const expectedOutput = new c();

    b.call({ each: a().each }, input);

    expect(a().data).toHaveBeenCalledWith('bs.affix');
    expect(data['bs.affix']).toEqual(expectedOutput);
    expect(c).toHaveBeenCalledWith(expect.any(Object), input);
  });

  test('should call the function with name b if the input is a string', () => {
    const input = 'testFunction';
    data['bs.affix'] = {
      testFunction: jest.fn()
    };

    b.call({ each: a().each }, input);

    expect(a().data).toHaveBeenCalledWith('bs.affix');
    expect(data['bs.affix'][input]).toHaveBeenCalled();
  });
});
