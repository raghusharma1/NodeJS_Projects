// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap minified function test', () => {
    let a, c, d, e, f, g, h, i, j, n, o, p, r;

    beforeEach(() => {
        a = jest.fn();
        c = jest.fn();
        d = jest.fn();
        e = jest.fn();
        f = jest.fn();
        g = jest.fn();
        h = jest.fn();
        i = jest.fn();
        j = jest.fn();
        n = jest.fn();
        o = jest.fn();
        p = jest.fn();
        r = jest.fn();
    });

    test('should call each() method', () => {
        const thisObj = {
            each: jest.fn()
        };
        b.call(thisObj, 'test');

        expect(thisObj.each).toHaveBeenCalled();
    });

    test('should create new data if it does not exist', () => {
        const thisObj = {
            each: jest.fn().mockImplementationOnce((fn) => {
                fn.call({
                    data: jest.fn().mockReturnValueOnce(null)
                });
            })
        };

        b.call(thisObj, 'test');

        expect(c).toHaveBeenCalledWith(thisObj, 'test');
    });

    test('should call the method if string is provided', () => {
        const e = {
            test: jest.fn()
        };
        const thisObj = {
            each: jest.fn().mockImplementationOnce((fn) => {
                fn.call({
                    data: jest.fn().mockReturnValueOnce(e)
                });
            })
        };

        b.call(thisObj, 'test');

        expect(e.test).toHaveBeenCalled();
    });
});
