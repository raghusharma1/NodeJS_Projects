// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = {
        data: jest.fn()
    };
    e = {
        new: jest.fn(),
        b: jest.fn()
    };
    f = {};
  });

  test('should call each function with correct parameters', () => {
    // Arrange
    const eachMock = jest.fn((callback) => callback());
    a.each = eachMock;

    // Act
    b(a);

    // Assert
    expect(eachMock).toHaveBeenCalled();
  });

  test('should call data function with correct parameters', () => {
    // Arrange
    const dataMock = jest.fn();
    d.data = dataMock;

    // Act
    b(d);

    // Assert
    expect(dataMock).toHaveBeenCalledWith("bs.affix");
  });

  test('should create new object if e is not defined', () => {
    // Arrange
    d.data = jest.fn(() => undefined);
    e.new = jest.fn();

    // Act
    b(d);

    // Assert
    expect(e.new).toHaveBeenCalledWith(d, f);
  });

  test('should not create new object if e is already defined', () => {
    // Arrange
    d.data = jest.fn(() => e);
    e.new = jest.fn();

    // Act
    b(d);

    // Assert
    expect(e.new).not.toHaveBeenCalled();
  });

  test('should call e[b] function if b is a string', () => {
    // Arrange
    e.b = jest.fn();
    d.data = jest.fn(() => e);

    // Act
    b(d, "b");

    // Assert
    expect(e.b).toHaveBeenCalled();
  });
});
