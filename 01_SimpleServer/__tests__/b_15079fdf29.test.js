// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Importing the dependencies
const a = require('../js/bootstrap.min.js');

describe("Bootstrap Affix Method", () => {
    let testObject;

    // Setup for tests
    beforeEach(() => {
        testObject = {
            data: jest.fn(),
            each: jest.fn(function(callback) {
                callback.call(this);
                return this;
            }),
        };
    });

    test("Should create new object with affix", () => {
        const b = {};
        a.b.call(testObject, b);
        expect(testObject.data).toHaveBeenCalledWith("bs.affix", expect.anything());
    });

    test("Should call method on existing affix object", () => {
        const e = { b: jest.fn() };
        testObject.data.mockReturnValueOnce(e);
        a.b.call(testObject, "b");
        expect(e.b).toHaveBeenCalled();
    });

    test("Should not create new object if one already exists", () => {
        const e = { b: jest.fn() };
        testObject.data.mockReturnValueOnce(e);
        a.b.call(testObject, "b");
        expect(testObject.data).toHaveBeenCalledTimes(1);
    });

    test("Should throw error for invalid method call", () => {
        const e = {};
        testObject.data.mockReturnValueOnce(e);
        expect(() => a.b.call(testObject, "invalidMethod")).toThrow();
    });
});
