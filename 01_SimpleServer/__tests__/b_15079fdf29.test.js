// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = { data: jest.fn() };
    e = { new: jest.fn(), b: jest.fn() };
    f = 'string';
    
    // Mock the 'this' context
    this = {
      each: jest.fn(callback => callback())
    };
    
    // Mock the 'a' function
    a.mockImplementation(() => d);
    
    // Mock the 'd.data' function
    d.data.mockImplementation(() => e);
    
    // Mock the 'e.new' function
    e.new.mockImplementation(() => f);
  });

  test('should call each function on this context', () => {
    b.call(this, f);
    expect(this.each).toHaveBeenCalled();
  });

  test('should call a function with this context', () => {
    b.call(this, f);
    expect(a).toHaveBeenCalledWith(this);
  });

  test('should call data function on d object', () => {
    b.call(this, f);
    expect(d.data).toHaveBeenCalledWith('bs.affix');
  });

  test('should call new function on e object when e is not defined', () => {
    d.data.mockReturnValueOnce(undefined);
    b.call(this, f);
    expect(e.new).toHaveBeenCalledWith(this, f);
  });

  test('should not call new function on e object when e is defined', () => {
    b.call(this, f);
    expect(e.new).not.toHaveBeenCalled();
  });

  test('should call b function on e object when typeof b is string', () => {
    b.call(this, f);
    expect(e.b).toHaveBeenCalled();
  });

  test('should not call b function on e object when typeof b is not string', () => {
    b.call(this, {});
    expect(e.b).not.toHaveBeenCalled();
  });
});
