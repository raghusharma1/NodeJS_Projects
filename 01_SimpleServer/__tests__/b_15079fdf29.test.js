// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let mockData;
  
  beforeEach(() => {
    mockData = {
      data: jest.fn(),
      each: jest.fn()
    };
    jest.spyOn(global, 'a').mockReturnValue(mockData);
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  test('should call each function with correct arguments', () => {
    const mockParam = {};
    b(mockParam);
    expect(mockData.each).toHaveBeenCalled();
  });

  test('should create new instance of c and assign it to e if e is not defined', () => {
    const mockParam = {};
    mockData.data.mockReturnValueOnce(undefined);
    b(mockParam);
    expect(mockData.data).toHaveBeenCalledWith('bs.affix', expect.any(Function));
  });

  test('should call e[b]() if b is a string', () => {
    const mockParam = 'test';
    const e = { test: jest.fn() };
    mockData.data.mockReturnValueOnce(e);
    b(mockParam);
    expect(e.test).toHaveBeenCalled();
  });

  test('should not call e[b]() if b is not a string', () => {
    const mockParam = {};
    const e = { test: jest.fn() };
    mockData.data.mockReturnValueOnce(e);
    b(mockParam);
    expect(e.test).not.toHaveBeenCalled();
  });
});
