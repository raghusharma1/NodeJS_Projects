// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = { data: jest.fn() };
    e = { new: jest.fn() };
    f = { b: jest.fn() };
    
    // Mock the 'this' context
    globalThis.each = jest.fn((callback) => callback());
    globalThis.string = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call each function with a callback', () => {
    b('test');
    expect(globalThis.each).toHaveBeenCalled();
  });

  test('should call data function with "bs.affix"', () => {
    b('test');
    expect(d.data).toHaveBeenCalledWith('bs.affix');
  });

  test('should call new function with "this" and "f"', () => {
    b('test');
    expect(e.new).toHaveBeenCalledWith(globalThis, f);
  });

  test('should call string function with "b"', () => {
    b('test');
    expect(globalThis.string).toHaveBeenCalledWith('b');
  });

  test('should call b function', () => {
    b('test');
    expect(f.b).toHaveBeenCalled();
  });
});
