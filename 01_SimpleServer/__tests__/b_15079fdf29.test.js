// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Importing the dependencies
const a = require('../js/bootstrap.min.js');

// Test suite
describe('Test suite for bootstrap.min.js', () => {

  // Before each test case
  beforeEach(() => {
    a.data = jest.fn();
  });

  // Test case 1
  test('should call "each" function with a function as argument', () => {
    const eachMockFn = jest.fn();
    a.each = eachMockFn;
    b('test');
    expect(eachMockFn).toHaveBeenCalled();
    expect(typeof eachMockFn.mock.calls[0][0]).toBe('function');
  });

  // Test case 2
  test('should call "data" function with "bs.affix" as argument', () => {
    b('test');
    expect(a.data).toHaveBeenCalledWith('bs.affix');
  });

  // Test case 3
  test('should call "data" function with "bs.affix" and an instance of c as arguments when e is undefined', () => {
    a.data.mockReturnValueOnce(undefined);
    const cInstance = new c();
    jest.spyOn(global, 'c').mockImplementation(() => cInstance);
    b('test');
    expect(a.data).toHaveBeenCalledWith('bs.affix', cInstance);
  });

  // Test case 4
  test('should call the function e[b] when b is a string and e is not undefined', () => {
    const e = { test: jest.fn() };
    a.data.mockReturnValueOnce(e);
    b('test');
    expect(e.test).toHaveBeenCalled();
  });

  // After each test case
  afterEach(() => {
    jest.clearAllMocks();
  });
});
