// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap min js test', () => {
  let input;
  let output;

  beforeEach(() => {
    input = {
      each: jest.fn().mockImplementation((fn) => {
        fn();
        return input;
      }),
      data: jest.fn(),
    };
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  test('should call each function with correct parameters', () => {
    b(input);
    expect(input.each).toHaveBeenCalled();
  });

  test('should call data function with "bs.affix" as parameter', () => {
    const mockData = jest.spyOn(input, 'data');
    b(input);
    expect(mockData).toHaveBeenCalledWith('bs.affix');
  });

  test('should assign new c to e when e is undefined', () => {
    const c = jest.fn();
    input.data = jest.fn().mockReturnValue(undefined);
    b.call({ each: input.each }, input);
    expect(c).toHaveBeenCalledWith(input, undefined);
  });

  test('should call e[b] when b is a string', () => {
    const mockFunction = jest.fn();
    input.data = jest.fn().mockReturnValue({ mockFunction });
    b.call({ each: input.each }, 'mockFunction');
    expect(mockFunction).toHaveBeenCalled();
  });
});
