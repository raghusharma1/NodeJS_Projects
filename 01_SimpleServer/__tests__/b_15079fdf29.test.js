// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    a = jest.fn();
    d = {
      data: jest.fn()
    };
    e = {
      new: jest.fn(),
      b: jest.fn()
    };
    f = "test";
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call each function correctly', () => {
    const eachFn = jest.fn((fn) => fn());
    const thisObj = {
      each: eachFn
    };

    b.call(thisObj, f);

    expect(eachFn).toHaveBeenCalledTimes(1);
  });

  test('should call data function with correct arguments', () => {
    const eachFn = jest.fn((fn) => fn());
    const thisObj = {
      each: eachFn
    };
    
    b.call(thisObj, f);

    expect(d.data).toHaveBeenCalledWith("bs.affix");
  });

  test('should create new instance of c', () => {
    const eachFn = jest.fn((fn) => fn());
    const thisObj = {
      each: eachFn
    };
    
    b.call(thisObj, f);

    expect(e.new).toHaveBeenCalledWith(thisObj, f);
  });

  test('should call b function when b is a string', () => {
    const eachFn = jest.fn((fn) => fn());
    const thisObj = {
      each: eachFn
    };
    const stringB = "testString";
    
    b.call(thisObj, stringB);

    expect(e.b).toHaveBeenCalledTimes(1);
  });
});
