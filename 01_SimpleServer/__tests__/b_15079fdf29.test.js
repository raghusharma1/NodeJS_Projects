// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap minified function test', () => {
    let a;

    beforeEach(() => {
        a = jest.fn();
    });

    test('Input of type object', () => {
        const input = { key: 'value' };
        a.mockReturnValue({
            each: jest.fn().mockImplementation((fn) => {
                fn();
            }),
            data: jest.fn().mockReturnValue({
                bs: { affix: 'affix' }
            })
        });

        expect(b(input)).toEqual({ each: expect.any(Function), data: expect.any(Function) });
    });

    test('Input of type string', () => {
        const input = 'test';
        a.mockReturnValue({
            each: jest.fn().mockImplementation((fn) => {
                fn();
            }),
            data: jest.fn().mockReturnValue({
                bs: { affix: 'affix' }
            })
        });

        expect(b(input)).toEqual({ each: expect.any(Function), data: expect.any(Function) });
    });

    test('Input as null', () => {
        const input = null;
        a.mockReturnValue({
            each: jest.fn().mockImplementation((fn) => {
                fn();
            }),
            data: jest.fn().mockReturnValue({
                bs: { affix: 'affix' }
            })
        });

        expect(b(input)).toEqual({ each: expect.any(Function), data: expect.any(Function) });
    });

    test('Input as undefined', () => {
        const input = undefined;
        a.mockReturnValue({
            each: jest.fn().mockImplementation((fn) => {
                fn();
            }),
            data: jest.fn().mockReturnValue({
                bs: { affix: 'affix' }
            })
        });

        expect(b(input)).toEqual({ each: expect.any(Function), data: expect.any(Function) });
    });
});
