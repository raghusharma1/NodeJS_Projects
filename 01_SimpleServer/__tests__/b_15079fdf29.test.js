// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = { data: jest.fn() };
    e = { new: jest.fn() };
    f = { b: jest.fn() };
    
    // Mock the 'this' context
    globalThis.each = jest.fn((callback) => callback());
    globalThis.a = a;
    globalThis.d = d;
    globalThis.e = e;
    globalThis.f = f;
  });
  
  afterEach(() => {
    jest.clearAllMocks();
  });

  test('Should invoke dependencies correctly', () => {
    const bArg = {};
    b(bArg);
    
    expect(globalThis.each).toHaveBeenCalled();
    expect(a).toHaveBeenCalledWith(globalThis);
    expect(d.data).toHaveBeenCalledWith('bs.affix');
    expect(e.new).toHaveBeenCalledWith(globalThis, bArg);
    expect(f.b).toHaveBeenCalled();
  });

  test('Should handle string argument', () => {
    const bArg = 'test';
    b(bArg);
    
    expect(globalThis.each).toHaveBeenCalled();
    expect(a).toHaveBeenCalledWith(globalThis);
    expect(d.data).toHaveBeenCalledWith('bs.affix');
    expect(e.new).toHaveBeenCalledWith(globalThis, undefined);
    expect(f.b).toHaveBeenCalled();
  });
});
