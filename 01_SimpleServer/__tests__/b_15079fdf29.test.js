// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    a = jest.fn();
    d = {
      data: jest.fn()
    };
    e = {
      new: jest.fn(),
      b: jest.fn()
    };
    f = "test";
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call each function with provided function', () => {
    const eachFn = jest.fn();
    b.bind({ each: eachFn })(f);

    expect(eachFn).toHaveBeenCalled();
    expect(eachFn.mock.calls[0][0]).toBeInstanceOf(Function);
  });

  test('should create new instance of c if e is not present', () => {
    d.data.mockReturnValueOnce(undefined);
    a.mockReturnValueOnce(d);

    const eachFn = jest.fn();
    b.bind({ each: eachFn })(f);

    const innerFn = eachFn.mock.calls[0][0];
    innerFn();

    expect(d.data).toHaveBeenCalledWith("bs.affix");
    expect(e.new).toHaveBeenCalledWith({ each: eachFn }, f);
  });

  test('should call e.b if b is a string', () => {
    d.data.mockReturnValueOnce(e);
    a.mockReturnValueOnce(d);

    const eachFn = jest.fn();
    b.bind({ each: eachFn })("b");

    const innerFn = eachFn.mock.calls[0][0];
    innerFn();

    expect(d.data).toHaveBeenCalledWith("bs.affix");
    expect(e.b).toHaveBeenCalled();
  });

  test('should not call e.b if b is not a string', () => {
    d.data.mockReturnValueOnce(e);
    a.mockReturnValueOnce(d);

    const eachFn = jest.fn();
    b.bind({ each: eachFn })(f);

    const innerFn = eachFn.mock.calls[0][0];
    innerFn();

    expect(d.data).toHaveBeenCalledWith("bs.affix");
    expect(e.b).not.toHaveBeenCalled();
  });
});
