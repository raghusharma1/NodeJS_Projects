// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Import the necessary modules
const bootstrap = require('../js/bootstrap.min.js');

describe("Testing bootstrap.min.js", () => {
  let instance;

  beforeEach(() => {
    instance = new bootstrap();
  });

  describe("Testing function b", () => {
    it('should return the correct value when a valid parameter is passed', () => {
      const mockData = jest.fn();
      const mockEach = jest.fn((fn) => fn());
      const mockThis = { each: mockEach };
      instance.a = jest.fn().mockReturnValue({ data: mockData });
      instance.c = jest.fn();
      mockData.mockReturnValueOnce(null).mockReturnValueOnce(new instance.c());
      
      const result = instance.b.call(mockThis, 'test');
      
      expect(instance.a).toHaveBeenCalled();
      expect(mockData).toHaveBeenCalled();
      expect(mockEach).toHaveBeenCalled();
      expect(result).toBe(mockThis);
    });

    it('should call the function when a string parameter is passed', () => {
      const mockData = jest.fn();
      const mockEach = jest.fn((fn) => fn());
      const mockThis = { each: mockEach };
      const mockC = jest.fn(() => ({ test: jest.fn() }));
      instance.a = jest.fn().mockReturnValue({ data: mockData });
      instance.c = jest.fn(mockC);
      mockData.mockReturnValueOnce(null).mockReturnValueOnce(new instance.c());
      
      const result = instance.b.call(mockThis, 'test');
      
      expect(instance.a).toHaveBeenCalled();
      expect(mockData).toHaveBeenCalled();
      expect(mockEach).toHaveBeenCalled();
      expect(result.test).toHaveBeenCalled();
      expect(result).toBe(mockThis);
    });
  });
});
