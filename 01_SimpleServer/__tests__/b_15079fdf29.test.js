// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Importing the dependencies
const a = require('../js/bootstrap.min.js');

// Test suite
describe('Test suite for bootstrap.min.js', () => {

  // Before each test case
  beforeEach(() => {
    a.data = jest.fn();
  });

  // Test case 1
  test('should call "each" function with a function as argument', () => {
    const eachMock = jest.fn();
    a.each = eachMock;
    a.b('test');
    expect(eachMock).toHaveBeenCalledWith(expect.any(Function));
  });

  // Test case 2
  test('should call "data" function with "bs.affix" as argument', () => {
    const eachMock = jest.fn();
    a.each = eachMock;
    a.b('test');
    expect(a.data).toHaveBeenCalledWith('bs.affix');
  });

  // Test case 3
  test('should call "data" function with "bs.affix" and new c(this,f) as arguments when e is undefined', () => {
    const eachMock = jest.fn();
    a.each = eachMock;
    a.b('test');
    expect(a.data).toHaveBeenCalledWith('bs.affix', new c(this,'test'));
  });

  // Test case 4
  test('should call e.b function when b is a string', () => {
    const eachMock = jest.fn();
    a.each = eachMock;
    a.b('test');
    expect(e.b).toHaveBeenCalled();
  });
});
