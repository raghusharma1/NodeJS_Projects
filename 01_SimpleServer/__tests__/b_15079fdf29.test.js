// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Importing the dependencies
const a = require('../js/bootstrap.min.js');

// Test suite
describe('Test suite for bootstrap.min.js', () => {

  // Before each test case
  beforeEach(() => {
    a.data = jest.fn();
  });

  // Test case 1
  test('should call "each" function with a function as argument', () => {
    const eachMockFn = jest.fn();
    a.each = eachMockFn;

    b('test');
    expect(eachMockFn).toHaveBeenCalled();
    expect(eachMockFn.mock.calls[0][0]).toBeInstanceOf(Function);
  });

  // Test case 2
  test('should create new instance of "c" and call "e.b" function when "b" argument is string', () => {
    const cMockFn = jest.fn();
    const eMockFn = jest.fn();
    a.c = cMockFn;
    a.data = jest.fn().mockReturnValue({ b: eMockFn });

    b('test');
    expect(cMockFn).toHaveBeenCalled();
    expect(eMockFn).toHaveBeenCalled();
  });

  // After each test case
  afterEach(() => {
    jest.clearAllMocks();
  });
});
