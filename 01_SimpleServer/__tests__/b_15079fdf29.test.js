// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
// Importing required dependencies 
const bootstrap = require('../js/bootstrap.min.js');

// Test suite for bootstrap.min.js
describe('Tests for bootstrap.min.js', () => {
  let originalDataMethod;
  let originalEachMethod;

  // Mocking the jQuery function
  global.$ = jest.fn(() => ({
    data: jest.fn(),
    each: jest.fn()
  }));

  // Mocking the new operator for 'c'
  global.c = jest.fn();

  // Save the original methods
  beforeAll(() => {
    originalDataMethod = $.fn.data;
    originalEachMethod = $.fn.each;
  });

  // Restore the original methods
  afterAll(() => {
    $.fn.data = originalDataMethod;
    $.fn.each = originalEachMethod;
  });

  // Test case 1: Check if 'each' is called
  test('Check if each method is called', () => {
    bootstrap.b('test');
    expect($.fn.each).toHaveBeenCalled();
  });

  // Test case 2: Check if 'data' is called
  test('Check if data method is called', () => {
    bootstrap.b('test');
    expect($.fn.data).toHaveBeenCalled();
  });

  // Test case 3: Check if new 'c' is created when 'e' is undefined
  test('Check if new c is created when e is undefined', () => {
    $.fn.data = jest.fn().mockReturnValueOnce(undefined);
    bootstrap.b('test');
    expect(global.c).toHaveBeenCalled();
  });

  // Test case 4: Check if 'e.b' is called when 'b' is a string
  test('Check if e.b is called when b is a string', () => {
    const mockE = { b: jest.fn() };
    $.fn.data = jest.fn().mockReturnValueOnce(mockE);
    bootstrap.b('b');
    expect(mockE.b).toHaveBeenCalled();
  });
});
