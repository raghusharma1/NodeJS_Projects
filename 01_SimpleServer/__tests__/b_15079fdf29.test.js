// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const { b } = require('../js/bootstrap.min.js');

describe('b function', () => {
  let data;

  beforeEach(() => {
    data = {
      data: jest.fn().mockReturnValue({}),
      each: jest.fn().mockImplementation(callback => callback())
    };
    global.a = jest.fn().mockReturnValue(data);
    global.c = jest.fn();
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('should create new instance of c if not exists', () => {
    const mockParameter = {};
    b.call(data, mockParameter);
    expect(global.c).toHaveBeenCalled();
    expect(data.data).toHaveBeenCalledWith('bs.affix', expect.anything());
  });

  it('should call method of c instance if string is passed', () => {
    const mockInstance = { testMethod: jest.fn() };
    global.c.mockReturnValue(mockInstance);
    data.data.mockReturnValue(mockInstance);
    b.call(data, 'testMethod');
    expect(mockInstance.testMethod).toHaveBeenCalled();
  });

  it('should throw error if method does not exist in c instance', () => {
    const mockInstance = { testMethod: jest.fn() };
    global.c.mockReturnValue(mockInstance);
    data.data.mockReturnValue(mockInstance);
    expect(() => b.call(data, 'nonExistingMethod')).toThrow();
  });
});
