// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = { data: jest.fn() };
    e = { new: jest.fn() };
    f = { b: jest.fn() };
    
    // Mock the global methods
    global.a = a;
    global.d = d;
    global.e = e;
    global.f = f;
  });

  afterEach(() => {
    // Clear the mocks after each test
    jest.clearAllMocks();
  });

  test('should call each function with correct parameters', () => {
    const bVal = 'test';
    b(bVal);
    expect(a).toHaveBeenCalledWith(bVal);
    expect(d.data).toHaveBeenCalledWith('bs.affix');
  });

  test('should call new function when e does not exist', () => {
    const bVal = 'test';
    d.data.mockReturnValue(undefined);
    b(bVal);
    expect(e.new).toHaveBeenCalledWith(bVal);
  });

  test('should call b function when b is a string', () => {
    const bVal = 'test';
    d.data.mockReturnValue('string');
    b(bVal);
    expect(f.b).toHaveBeenCalled();
  });

  test('should not call b function when b is not a string', () => {
    const bVal = {};
    d.data.mockReturnValue('string');
    b(bVal);
    expect(f.b).not.toHaveBeenCalled();
  });

});
