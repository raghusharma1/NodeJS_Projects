// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min.js'); // Adjust this path according to your project structure

describe('Function b test suite', () => {
  
  let data;
  
  beforeEach(() => {
    data = {
      "bs.affix": undefined,
      each: function(callback) {
        callback();
      },
    };
  });

  test('should assign new value to "bs.affix" if it does not exist', () => {
    const c = jest.fn();
    const a = jest.fn().mockReturnValue(data);
    global.a = a;
    b.call(data, c);
    expect(data["bs.affix"]).toBeInstanceOf(c);
  });

  test('should call function e[b]() if b is a string', () => {
    const e = {
      newFunction: jest.fn()
    };
    data["bs.affix"] = e;
    b.call(data, 'newFunction');
    expect(e.newFunction).toHaveBeenCalled();
  });

  test('should not call function e[b]() if b is not a string', () => {
    const e = {
      newFunction: jest.fn()
    };
    data["bs.affix"] = e;
    b.call(data, 123);
    expect(e.newFunction).not.toHaveBeenCalled();
  });

});
