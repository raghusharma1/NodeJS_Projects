// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = { data: jest.fn() };
    e = { new: jest.fn(), b: jest.fn() };
    f = 'string';
    
    // Mock the this context
    this.each = jest.fn((fn) => fn.call({ a, d, e, f }));
  });
  
  test('should call `this.each` function', () => {
    b.call(this, f);
    expect(this.each).toHaveBeenCalled();
  });

  test('should create new instance of `c` if `e` is not defined', () => {
    d.data.mockReturnValueOnce(undefined);
    b.call(this, f);
    expect(e.new).toHaveBeenCalledWith(this, f);
  });

  test('should not create new instance of `c` if `e` is defined', () => {
    d.data.mockReturnValueOnce(e);
    b.call(this, f);
    expect(e.new).not.toHaveBeenCalled();
  });

  test('should call `e[b]` function if `b` is a string', () => {
    b.call(this, f);
    expect(e.b).toHaveBeenCalled();
  });

  test('should not call `e[b]` function if `b` is not a string', () => {
    b.call(this, {});
    expect(e.b).not.toHaveBeenCalled();
  });
});
