// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=b_fb94df674e
ROOST_METHOD_SIG_HASH=b_15079fdf29


*/

// ********RoostGPT********
const b = require('../js/bootstrap.min');

describe('Bootstrap function b', () => {
  let a, d, e, f;
  
  beforeEach(() => {
    // Mock the dependencies
    a = jest.fn();
    d = {
        data: jest.fn()
    };
    e = {
        new: jest.fn(),
        string: jest.fn()
    };
    f = {};
  });

  test('should call each function with correct parameters', () => {
    // Arrange
    const input = 'test';
    
    // Act
    b(input);

    // Assert
    expect(a.each).toHaveBeenCalledWith(expect.any(Function));
  });

  test('should call data function with "bs.affix" as parameter', () => {
    // Arrange
    const input = 'test';
    
    // Act
    b(input);

    // Assert
    expect(d.data).toHaveBeenCalledWith('bs.affix');
  });

  test('should create new instance of c when e does not exist', () => {
    // Arrange
    const input = 'test';
    d.data.mockReturnValueOnce(null);
    
    // Act
    b(input);

    // Assert
    expect(e.new).toHaveBeenCalledWith(this, f);
  });

  test('should call e[b] function when b is a string', () => {
    // Arrange
    const input = 'test';
    e.string.mockReturnValueOnce(true);
    
    // Act
    b(input);

    // Assert
    expect(e[input]).toHaveBeenCalled();
  });
});
