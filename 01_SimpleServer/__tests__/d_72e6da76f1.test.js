// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Define the test suite
describe('d function in bootstrap.min.js', () => {

  // This will run before each test case
  beforeEach(() => {
    // Setting up the variables and functions
    global.e = {
      hoverState: 'out',
      $element: {
        removeAttr: jest.fn(),
        trigger: jest.fn()
      },
      type: 'testType'
    };
    global.f = {
      detach: jest.fn()
    };
    global.b = jest.fn();
  });

  // Test case 1
  test('should call f.detach and removeAttr when hoverState is not "in"', () => {
    // Call the function
    bootstrap.d();

    // Assert that f.detach and removeAttr were called
    expect(global.f.detach).toHaveBeenCalled();
    expect(global.e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
  });

  // Test case 2
  test('should trigger "hidden.bs.testType" when hoverState is not "in"', () => {
    // Call the function
    bootstrap.d();

    // Assert that trigger was called with "hidden.bs.testType"
    expect(global.e.$element.trigger).toHaveBeenCalledWith('hidden.bs.testType');
  });

  // Test case 3
  test('should call b when b is defined and hoverState is not "in"', () => {
    // Call the function
    bootstrap.d();

    // Assert that b was called
    expect(global.b).toHaveBeenCalled();
  });

  // Test case 4
  test('should not call f.detach and removeAttr when hoverState is "in"', () => {
    // Set hoverState as "in"
    global.e.hoverState = 'in';

    // Call the function
    bootstrap.d();

    // Assert that f.detach and removeAttr were not called
    expect(global.f.detach).not.toHaveBeenCalled();
    expect(global.e.$element.removeAttr).not.toHaveBeenCalled();
  });
});
