// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules for testing
const bootstrap = require("../js/bootstrap.min");

// Mocking associated functions and variables
let mockDetach = jest.fn();
let mockTrigger = jest.fn();
let mockRemoveAttr = jest.fn();
let mockElement = {
  removeAttr: mockRemoveAttr,
  trigger: mockTrigger
};
let mockHoverState = "out";

// Setting up the global object
global.e = {
  hoverState: mockHoverState,
  $element: mockElement,
  type: "testType"
};
global.f = {
  detach: mockDetach
};
global.b = jest.fn();

// Test suite for function d
describe("Function d", () => {
  // Resetting the mocks before each test
  beforeEach(() => {
    mockDetach.mockReset();
    mockTrigger.mockReset();
    mockRemoveAttr.mockReset();
    mockHoverState = "out";
  });

  // Test case for a successful function run
  test("should run successfully", () => {
    bootstrap.d();
    expect(mockDetach).toHaveBeenCalled();
    expect(mockRemoveAttr).toHaveBeenCalledWith("aria-describedby");
    expect(mockTrigger).toHaveBeenCalledWith("hidden.bs.testType");
    expect(global.b).toHaveBeenCalled();
  });

  // Test case for an unsuccessful function run
  test("should not run successfully", () => {
    mockHoverState = "in";
    bootstrap.d();
    expect(mockDetach).not.toHaveBeenCalled();
    expect(mockRemoveAttr).not.toHaveBeenCalled();
    expect(mockTrigger).not.toHaveBeenCalled();
    expect(global.b).not.toHaveBeenCalled();
  });
});
