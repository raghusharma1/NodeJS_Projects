// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

describe("Bootstrap Minified Function Tests", () => {
    
    let originalDetachFunction;
    let originalTriggerFunction;
    let originalRemoveAttrFunction;
    
    beforeAll(() => {
        // Mocking the dependencies
        originalDetachFunction = global.f.detach;
        originalTriggerFunction = global.$.fn.trigger;
        originalRemoveAttrFunction = global.$.fn.removeAttr;
        
        global.f.detach = jest.fn();
        global.$.fn.trigger = jest.fn();
        global.$.fn.removeAttr = jest.fn();
    });

    afterAll(() => {
        // Restoring the original functions
        global.f.detach = originalDetachFunction;
        global.$.fn.trigger = originalTriggerFunction;
        global.$.fn.removeAttr = originalRemoveAttrFunction;
    });

    test("Ensure d function calls dependencies correctly", () => {
        let mockElement = {
            removeAttr: jest.fn(),
            trigger: jest.fn()
        };
        global.e = {
            $element: mockElement,
            hoverState: "out",
            type: "test"
        };
        global.b = jest.fn();

        bootstrap.d();

        expect(global.f.detach).toHaveBeenCalled();
        expect(mockElement.removeAttr).toHaveBeenCalledWith("aria-describedby");
        expect(mockElement.trigger).toHaveBeenCalledWith("hidden.bs.test");
        expect(global.b).toHaveBeenCalled();
    });

    test("Ensure d function does not call detach when hoverState is 'in'", () => {
        let mockElement = {
            removeAttr: jest.fn(),
            trigger: jest.fn()
        };
        global.e = {
            $element: mockElement,
            hoverState: "in",
            type: "test"
        };
        global.b = jest.fn();

        bootstrap.d();

        expect(global.f.detach).not.toHaveBeenCalled();
    });
});
