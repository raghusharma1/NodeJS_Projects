// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

describe("Bootstrap Minified Function Tests", () => {
    
    let originalDetachFunction;
    let originalTriggerFunction;
    let originalRemoveAttrFunction;
    
    beforeAll(() => {
        // Mocking the dependencies
        originalDetachFunction = global.f.detach;
        originalTriggerFunction = global.$.fn.trigger;
        originalRemoveAttrFunction = global.$.fn.removeAttr;
        
        global.f = {
            detach: jest.fn(),
        };
        
        global.$.fn = {
            trigger: jest.fn(),
            removeAttr: jest.fn(),
        };
    });
    
    afterEach(() => {
        // Clean up after each test
        global.f.detach.mockClear();
        global.$.fn.trigger.mockClear();
        global.$.fn.removeAttr.mockClear();
    });
    
    afterAll(() => {
        // Restoring the original functions after all tests
        global.f.detach = originalDetachFunction;
        global.$.fn.trigger = originalTriggerFunction;
        global.$.fn.removeAttr = originalRemoveAttrFunction;
    });
    
    test("Function d() should call f.detach, removeAttr and trigger if hoverState is not 'in'", () => {
        global.e = {
            hoverState: 'out',
            $element: global.$(),
            type: 'test',
        };
        global.b = jest.fn();
        
        bootstrap.d();
        
        expect(global.f.detach).toHaveBeenCalledTimes(1);
        expect(global.e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
        expect(global.e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + global.e.type);
        expect(global.b).toHaveBeenCalledTimes(1);
    });
    
    test("Function d() should not call f.detach, removeAttr and trigger if hoverState is 'in'", () => {
        global.e = {
            hoverState: 'in',
            $element: global.$(),
            type: 'test',
        };
        global.b = jest.fn();
        
        bootstrap.d();
        
        expect(global.f.detach).not.toHaveBeenCalled();
        expect(global.e.$element.removeAttr).not.toHaveBeenCalled();
        expect(global.e.$element.trigger).not.toHaveBeenCalled();
        expect(global.b).not.toHaveBeenCalled();
    });
});
