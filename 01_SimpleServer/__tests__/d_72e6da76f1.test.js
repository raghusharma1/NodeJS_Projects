// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require("../js/bootstrap.min.js");

// Define the test suite
describe("d function in bootstrap.min.js", () => {

  // This is a mock function to replace the actual dependencies
  const mockFunction = jest.fn();

  // Test case 1
  test("should call all the dependent functions and variables correctly", () => {
    const e = {
      hoverState: "out",
      $element: {
        removeAttr: mockFunction,
        trigger: mockFunction
      },
      type: "test"
    };
    const f = {
      detach: mockFunction
    };
    const b = "test";

    bootstrap.d(e, f, b);

    expect(e.$element.removeAttr).toHaveBeenCalledWith("aria-describedby");
    expect(e.$element.trigger).toHaveBeenCalledWith("hidden.bs.test");
    expect(f.detach).toHaveBeenCalled();
  });

  // Test case 2
  test("should not call detach function when hoverState is 'in'", () => {
    const e = {
      hoverState: "in",
      $element: {
        removeAttr: mockFunction,
        trigger: mockFunction
      },
      type: "test"
    };
    const f = {
      detach: mockFunction
    };
    const b = "test";

    bootstrap.d(e, f, b);

    expect(e.$element.removeAttr).toHaveBeenCalledWith("aria-describedby");
    expect(e.$element.trigger).toHaveBeenCalledWith("hidden.bs.test");
    expect(f.detach).not.toHaveBeenCalled();
  });
});
