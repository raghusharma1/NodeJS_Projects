// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules for testing
const bootstrap = require("../js/bootstrap.min");

// Mocking associated functions and variables
let f = { detach: jest.fn() };
let b;
let e = { 
  hoverState: '', 
  $element: { 
    removeAttr: jest.fn(), 
    trigger: jest.fn() 
  }, 
  type: '' 
};

describe('Test Suite for d function in bootstrap.min.js', () => {

  beforeEach(() => {
    f.detach.mockClear();
    e.$element.removeAttr.mockClear();
    e.$element.trigger.mockClear();
  });

  test('Test case when hoverState is not "in"', () => {
    e.hoverState = 'out';
    bootstrap.d();

    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
    if(b) expect(b).toHaveBeenCalled();
  });

  test('Test case when hoverState is "in"', () => {
    e.hoverState = 'in';
    bootstrap.d();

    expect(f.detach).not.toHaveBeenCalled();
    expect(e.$element.removeAttr).not.toHaveBeenCalledWith('aria-describedby');
    expect(e.$element.trigger).not.toHaveBeenCalledWith('hidden.bs.' + e.type);
    if(b) expect(b).not.toHaveBeenCalled();
  });

});
