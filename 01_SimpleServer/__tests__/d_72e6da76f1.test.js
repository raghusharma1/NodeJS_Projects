// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules for testing
const bootstrap = require("../js/bootstrap.min.js");

// Test Suite for function d()
describe("Function d() Test Suite", () => {
  let e, f, b;

  // Set up before each test case
  beforeEach(() => {
    f = {
      detach: jest.fn()
    };
    e = {
      hoverState: "in",
      $element: {
        removeAttr: jest.fn().mockReturnThis(),
        trigger: jest.fn().mockReturnThis()
      },
      type: "test"
    };
    b = jest.fn();
  });

  // Test case 1: Ensure function d() correctly detaches and triggers events when hoverState is not "in"
  test("Should correctly detach and trigger events when hoverState is not 'in'", () => {
    e.hoverState = "out";
    bootstrap.d();

    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith("aria-describedby");
    expect(e.$element.trigger).toHaveBeenCalledWith("hidden.bs.test");
    expect(b).toHaveBeenCalled();
  });

  // Test case 2: Ensure function d() does not detach or trigger events when hoverState is "in"
  test("Should not detach or trigger events when hoverState is 'in'", () => {
    bootstrap.d();

    expect(f.detach).not.toHaveBeenCalled();
    expect(e.$element.removeAttr).not.toHaveBeenCalled();
    expect(e.$element.trigger).not.toHaveBeenCalled();
    expect(b).not.toHaveBeenCalled();
  });
});
