// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

describe("Bootstrap Minified Function Tests", () => {
    
    let originalDetachFunction, originalTriggerFunction, originalRemoveAttrFunction, originalElementHeight;
    
    beforeAll(() => {
        // Save the original implementations
        originalDetachFunction = bootstrap.f.detach;
        originalTriggerFunction = bootstrap.e.$element.trigger;
        originalRemoveAttrFunction = bootstrap.e.$element.removeAttr;
        originalElementHeight = bootstrap.e.$element.height;
    });

    beforeEach(() => {
        // Reset the mocked functions before each test
        bootstrap.f.detach = jest.fn();
        bootstrap.e.$element.trigger = jest.fn();
        bootstrap.e.$element.removeAttr = jest.fn();
        bootstrap.e.$element.height = jest.fn();
    });

    afterAll(() => {
        // Restore the original implementations after the tests
        bootstrap.f.detach = originalDetachFunction;
        bootstrap.e.$element.trigger = originalTriggerFunction;
        bootstrap.e.$element.removeAttr = originalRemoveAttrFunction;
        bootstrap.e.$element.height = originalElementHeight;
    });

    test("Function d should call detach function when hoverState is not 'in'", () => {
        bootstrap.e.hoverState = 'out';
        bootstrap.d();
        expect(bootstrap.f.detach).toHaveBeenCalled();
    });

    test("Function d should not call detach function when hoverState is 'in'", () => {
        bootstrap.e.hoverState = 'in';
        bootstrap.d();
        expect(bootstrap.f.detach).not.toHaveBeenCalled();
    });

    test("Function d should call removeAttr and trigger functions regardless of hoverState", () => {
        bootstrap.e.hoverState = 'in';
        bootstrap.d();
        expect(bootstrap.e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
        expect(bootstrap.e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + bootstrap.e.type);
        
        bootstrap.e.hoverState = 'out';
        bootstrap.d();
        expect(bootstrap.e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
        expect(bootstrap.e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + bootstrap.e.type);
    });

    test("Function d should call b function when b is defined", () => {
        bootstrap.b = jest.fn();
        bootstrap.d();
        expect(bootstrap.b).toHaveBeenCalled();
    });

    test("Function d should not call b function when b is not defined", () => {
        bootstrap.b = undefined;
        bootstrap.d();
        expect(bootstrap.b).not.toBeDefined();
    });
});
