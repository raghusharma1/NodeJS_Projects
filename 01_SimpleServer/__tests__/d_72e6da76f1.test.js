// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Define the test suite
describe('d function in bootstrap.min.js', () => {

  // This will run before each test case
  beforeEach(() => {
    // Setting up the variables and functions
    bootstrap.e = { hoverState: 'in', $element: { removeAttr: jest.fn(), trigger: jest.fn() } };
    bootstrap.f = { detach: jest.fn() };
    bootstrap.b = jest.fn();
  });

  // Test case 1
  test('should call the detach function and removeAttr and trigger functions when hoverState is not "in"', () => {
    bootstrap.e.hoverState = 'out';

    bootstrap.d();

    expect(bootstrap.f.detach).toHaveBeenCalled();
    expect(bootstrap.e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    expect(bootstrap.e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + bootstrap.e.type);
    expect(bootstrap.b).not.toHaveBeenCalled();
  });

  // Test case 2
  test('should call b function when hoverState is "in"', () => {
    bootstrap.e.hoverState = 'in';

    bootstrap.d();

    expect(bootstrap.f.detach).not.toHaveBeenCalled();
    expect(bootstrap.e.$element.removeAttr).not.toHaveBeenCalled();
    expect(bootstrap.e.$element.trigger).not.toHaveBeenCalled();
    expect(bootstrap.b).toHaveBeenCalled();
  });
});
