// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Define the test suite
describe('d function from bootstrap.min.js', () => {

  // This is a mock function to replace the actual dependencies
  const mockFunction = jest.fn();

  // Define the dependencies before each test
  beforeEach(() => {
    global.f = { detach: mockFunction };
    global.e = { hoverState: 'out', $element: { removeAttr: mockFunction, trigger: mockFunction }, type: 'test' };
    global.b = mockFunction;
  });

  // Test case 1: Check if the function calls the correct methods when hoverState is not 'in'
  test('should call detach, removeAttr and trigger methods when hoverState is not "in"', () => {
    bootstrap.d();
    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
    expect(b).toHaveBeenCalled();
  });

  // Test case 2: Check if the function does not call the detach method when hoverState is 'in'
  test('should not call detach method when hoverState is "in"', () => {
    e.hoverState = 'in';
    bootstrap.d();
    expect(f.detach).not.toHaveBeenCalled();
  });

});

