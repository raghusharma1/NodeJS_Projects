// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Define the test suite
describe('d function tests', () => {
  let e;
  let f;
  let b;

  // Set up the preconditions
  beforeEach(() => {
    e = {
      hoverState: 'out',
      $element: {
        removeAttr: jest.fn(),
        trigger: jest.fn(),
      },
      type: 'test',
    };
    f = {
      detach: jest.fn(),
    };
    b = jest.fn();
  });

  // Test case 1: Check if e.hoverState is not equal to 'in'
  test('should detach and remove attribute if hoverState is not in', () => {
    bootstrap.d();
    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.'+e.type);
    expect(b).toHaveBeenCalled();
  });

  // Test case 2: Check if e.hoverState is equal to 'in'
  test('should not detach and not remove attribute if hoverState is in', () => {
    e.hoverState = 'in';
    bootstrap.d();
    expect(f.detach).not.toHaveBeenCalled();
    expect(e.$element.removeAttr).not.toHaveBeenCalled();
    expect(e.$element.trigger).not.toHaveBeenCalled();
    expect(b).toHaveBeenCalled();
  });
});
