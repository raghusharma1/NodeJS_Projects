// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min.js');

// Test Suite for d function
describe('d Function from bootstrap.min.js', () => {
  let e, b, f;
  
  // Set up before each test case
  beforeEach(() => {
    f = {
      detach: jest.fn()
    };
    e = {
      hoverState: 'in',
      $element: {
        removeAttr: jest.fn().mockReturnThis(),
        trigger: jest.fn().mockReturnThis()
      },
      type: 'test'
    };
    b = jest.fn();
  });

  // Test case 1: When hoverState is not equal to 'in'
  test('should detach, remove attribute and trigger when hoverState is not "in"', () => {
    e.hoverState = 'out';
    bootstrap.d();
    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
    expect(b).toHaveBeenCalled();
  });

  // Test case 2: When hoverState is equal to 'in'
  test('should not detach, not remove attribute and not trigger when hoverState is "in"', () => {
    bootstrap.d();
    expect(f.detach).not.toHaveBeenCalled();
    expect(e.$element.removeAttr).not.toHaveBeenCalled();
    expect(e.$element.trigger).not.toHaveBeenCalled();
    expect(b).not.toHaveBeenCalled();
  });
});
