// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules for testing
const bootstrap = require("../js/bootstrap.min.js");

// Test Suite for function d
describe("Function d tests", () => {
    let f, e, b;

    // Setup necessary preconditions
    beforeEach(() => {
        f = {
            detach: jest.fn(),
        };
        e = {
            hoverState: "out",
            $element: {
                removeAttr: jest.fn(),
                trigger: jest.fn(),
            },
            type: "bs",
        };
        b = jest.fn();
    });

    // Test case 1: Check if f.detach is called when hoverState is not 'in'
    test("f.detach is called when hoverState is not 'in'", () => {
        bootstrap.d();
        expect(f.detach).toHaveBeenCalled();
    });

    // Test case 2: Check if $element.removeAttr is called with 'aria-describedby'
    test("$element.removeAttr is called with 'aria-describedby'", () => {
        bootstrap.d();
        expect(e.$element.removeAttr).toHaveBeenCalledWith("aria-describedby");
    });

    // Test case 3: Check if $element.trigger is called with 'hidden.bs.type'
    test("$element.trigger is called with 'hidden.bs.type'", () => {
        bootstrap.d();
        expect(e.$element.trigger).toHaveBeenCalledWith("hidden.bs." + e.type);
    });

    // Test case 4: Check if b is called when b is defined
    test("b is called when b is defined", () => {
        bootstrap.d();
        expect(b).toHaveBeenCalled();
    });

    // Test case 5: Check if b is not called when b is not defined
    test("b is not called when b is not defined", () => {
        b = null;
        bootstrap.d();
        expect(b).not.toHaveBeenCalled();
    });
});
