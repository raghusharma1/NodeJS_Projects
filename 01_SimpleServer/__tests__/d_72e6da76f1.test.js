// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Define the test suite
describe('d function in bootstrap.min.js', () => {

  // This will run before each test case
  beforeEach(() => {
    // Setting up the variables and functions
    bootstrap.e = {
      hoverState: 'out',
      $element: {
        removeAttr: jest.fn(),
        trigger: jest.fn()
      },
      type: 'testType'
    };
    bootstrap.f = {
      detach: jest.fn()
    };
    bootstrap.b = jest.fn();
  });

  // Test case 1
  test('should call the correct functions and set the right properties when hoverState is not "in"', () => {
    // Execute the function
    bootstrap.d();

    // Check the expected outcomes
    expect(bootstrap.f.detach).toHaveBeenCalled();
    expect(bootstrap.e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    expect(bootstrap.e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + bootstrap.e.type);
    expect(bootstrap.b).toHaveBeenCalled();
  });

  // Test case 2
  test('should not call detach function when hoverState is "in"', () => {
    // Change the hoverState
    bootstrap.e.hoverState = 'in';

    // Execute the function
    bootstrap.d();

    // Check the expected outcomes
    expect(bootstrap.f.detach).not.toHaveBeenCalled();
  });
});
