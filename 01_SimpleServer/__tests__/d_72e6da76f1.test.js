// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules for testing
const bootstrap = require("../js/bootstrap.min");

// Mocking the dependencies
const mockDetach = jest.fn();
const mockTrigger = jest.fn();
const mockRemoveAttr = jest.fn();

// Defining the global object with necessary properties and methods
global.e = {
  hoverState: 'out',
  $element: {
    trigger: mockTrigger,
    removeAttr: mockRemoveAttr
  },
  type: 'test'
};

global.f = {
  detach: mockDetach
};

global.b = jest.fn();

describe('Testing d function in bootstrap', () => {
  beforeEach(() => {
    // Clear all instances and calls to constructor and all methods:
    mockDetach.mockClear();
    mockTrigger.mockClear();
    mockRemoveAttr.mockClear();
    global.b.mockClear();
  });

  test('should call f.detach and $element methods', () => {
    bootstrap.d();

    // Check if f.detach is called
    expect(mockDetach).toHaveBeenCalled();

    // Check if $element.removeAttr is called with 'aria-describedby'
    expect(mockRemoveAttr).toHaveBeenCalledWith('aria-describedby');

    // Check if $element.trigger is called with 'hidden.bs.' + e.type
    expect(mockTrigger).toHaveBeenCalledWith('hidden.bs.' + global.e.type);
  });

  test('should call b function if it is truthy', () => {
    global.b = jest.fn(() => true);
    bootstrap.d();

    // Check if b is called
    expect(global.b).toHaveBeenCalled();
  });

  test('should not call b function if it is falsy', () => {
    global.b = jest.fn(() => false);
    bootstrap.d();

    // Check if b is not called
    expect(global.b).not.toHaveBeenCalled();
  });
});
