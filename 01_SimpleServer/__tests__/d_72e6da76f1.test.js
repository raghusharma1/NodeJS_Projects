// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import required dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Define the test suite
describe('d function in bootstrap.min.js', () => {

  // This is a mock function to replace the internal functions used in `d`
  const mockFn = jest.fn();

  // Mocking the `detach` and `removeAttr` functions
  const f = { detach: mockFn };
  const e = { 
    $element: { removeAttr: mockFn, trigger: mockFn }, 
    hoverState: 'out', 
    type: 'testType' 
  };

  // Mocking the `b` variable
  const b = jest.fn();

  // This setup will be used before each test
  beforeEach(() => {
    mockFn.mockClear();
    b.mockClear();
  });

  // Test case 1: Check if `detach` function is called when `hoverState` is not 'in'
  test('should call detach function when hoverState is not "in"', () => {
    bootstrap.d(f, e, b);
    expect(f.detach).toHaveBeenCalled();
  });

  // Test case 2: Check if `removeAttr` function is called
  test('should call removeAttr function', () => {
    bootstrap.d(f, e, b);
    expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
  });

  // Test case 3: Check if `trigger` function is called with the correct argument
  test('should call trigger function with correct argument', () => {
    bootstrap.d(f, e, b);
    expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
  });

  // Test case 4: Check if `b` function is called
  test('should call b function', () => {
    bootstrap.d(f, e, b);
    expect(b).toHaveBeenCalled();
  });
});
