// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules for testing
const bootstrap = require("../js/bootstrap.min");

// Test Suite for function d
describe("Test Suite for function d in bootstrap.min.js", () => {
  let e, b, f;

  // Setup for each test case
  beforeEach(() => {
    e = { hoverState: "in", $element: { removeAttr: jest.fn(), trigger: jest.fn() }, type: "type" };
    b = jest.fn();
    f = { detach: jest.fn() };
  });

  // Test case 1: When hoverState is not "in"
  test("When hoverState is not 'in'", () => {
    e.hoverState = "out";

    bootstrap.d();

    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith("aria-describedby");
    expect(e.$element.trigger).toHaveBeenCalledWith("hidden.bs." + e.type);
    expect(b).toHaveBeenCalled();
  });

  // Test case 2: When hoverState is "in"
  test("When hoverState is 'in'", () => {
    bootstrap.d();

    expect(f.detach).not.toHaveBeenCalled();
    expect(e.$element.removeAttr).not.toHaveBeenCalledWith("aria-describedby");
    expect(e.$element.trigger).not.toHaveBeenCalledWith("hidden.bs." + e.type);
    expect(b).not.toHaveBeenCalled();
  });
});
