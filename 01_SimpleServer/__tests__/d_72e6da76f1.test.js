// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

describe('bootstrap.min.js tests', () => {
  let e;
  let b;
  let f;

  beforeEach(() => {
    f = {
      detach: jest.fn()
    };
    e = {
      hoverState: 'out',
      $element: {
        removeAttr: jest.fn().mockReturnThis(),
        trigger: jest.fn().mockReturnThis()
      },
      type: 'test'
    };
    b = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call f.detach and e.$element.removeAttr and e.$element.trigger if "in" is not equal to e.hoverState', () => {
    bootstrap.d();
    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
  });

  test('should call b if b is defined', () => {
    b = jest.fn();
    bootstrap.d();
    expect(b).toHaveBeenCalled();
  });

  test('should not call b if b is undefined', () => {
    b = undefined;
    bootstrap.d();
    expect(b).not.toHaveBeenCalled();
  });

  test('should not call f.detach and e.$element.removeAttr and e.$element.trigger if "in" is equal to e.hoverState', () => {
    e.hoverState = 'in';
    bootstrap.d();
    expect(f.detach).not.toHaveBeenCalled();
    expect(e.$element.removeAttr).not.toHaveBeenCalled();
    expect(e.$element.trigger).not.toHaveBeenCalled();
  });
});
