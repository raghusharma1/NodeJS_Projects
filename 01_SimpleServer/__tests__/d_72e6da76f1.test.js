// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules for testing
const bootstrap = require("../js/bootstrap.min");

// Test Suite for function d
describe("Function d Test Suite", () => {
    let f, b, e;

    // Setup before each test
    beforeEach(() => {
        f = {
            detach: jest.fn(),
        };
        b = jest.fn();
        e = {
            hoverState: 'out',
            $element: {
                removeAttr: jest.fn(),
                trigger: jest.fn()
            },
            type: 'testType'
        };
        bootstrap.__set__("f", f);
        bootstrap.__set__("b", b);
        bootstrap.__set__("e", e);
    });

    // Test Case 1: When hoverState is not 'in'
    test("Should call f.detach, e.$element.removeAttr and e.$element.trigger when hoverState is not 'in'", () => {
        bootstrap.d();
        expect(f.detach).toHaveBeenCalled();
        expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
        expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
        expect(b).not.toHaveBeenCalled();
    });

    // Test Case 2: When hoverState is 'in'
    test("Should not call f.detach, e.$element.removeAttr and e.$element.trigger when hoverState is 'in'", () => {
        e.hoverState = 'in';
        bootstrap.d();
        expect(f.detach).not.toHaveBeenCalled();
        expect(e.$element.removeAttr).not.toHaveBeenCalled();
        expect(e.$element.trigger).not.toHaveBeenCalled();
        expect(b).not.toHaveBeenCalled();
    });

    // Test Case 3: When b is defined
    test("Should call b when it's defined", () => {
        b = jest.fn();
        bootstrap.__set__("b", b);
        bootstrap.d();
        expect(b).toHaveBeenCalled();
    });

    // Test Case 4: When b is not defined
    test("Should not call b when it's not defined", () => {
        b = undefined;
        bootstrap.__set__("b", b);
        bootstrap.d();
        expect(b).not.toBeDefined();
    });
});
