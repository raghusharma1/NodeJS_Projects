// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min');

describe('bootstrap.min.js', () => {
  let hoverState;
  let $element;
  let type;
  let detach;

  beforeEach(() => {
    // Mocking the dependencies
    detach = jest.fn();

    $element = {
      removeAttr: jest.fn(),
      trigger: jest.fn()
    };

    hoverState = 'out';
    type = 'bs';

    // Mocking the global state
    global.e = { hoverState, $element, type };
    global.f = { detach };
    global.b = jest.fn();
  });

  afterEach(() => {
    // Cleaning up the global state
    delete global.e;
    delete global.f;
    delete global.b;
  });

  test('should call detach function when hoverState is not "in"', () => {
    bootstrap.d();
    expect(detach).toHaveBeenCalled();
  });

  test('should not call detach function when hoverState is "in"', () => {
    global.e.hoverState = 'in';
    bootstrap.d();
    expect(detach).not.toHaveBeenCalled();
  });

  test('should remove attribute "aria-describedby" from $element', () => {
    bootstrap.d();
    expect($element.removeAttr).toHaveBeenCalledWith('aria-describedby');
  });

  test('should trigger "hidden.bs.type" on $element', () => {
    bootstrap.d();
    expect($element.trigger).toHaveBeenCalledWith(`hidden.bs.${type}`);
  });
});
