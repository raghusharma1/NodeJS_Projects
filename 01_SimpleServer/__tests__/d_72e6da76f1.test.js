// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Importing necessary modules for testing
const bootstrap = require("../js/bootstrap.min");

// Mocking associated functions and variables
let f = { detach: jest.fn() };
let b;
let e = { 
  hoverState: 'out',
  $element: { 
    removeAttr: jest.fn(),
    trigger: jest.fn() 
  },
  type: 'testType'
};

// Test Suite for function d
describe('Function d Test Suite', () => {
  
  // Resetting the mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
    b = jest.fn();
  });

  // Test case 1: When hover state is not 'in'
  test('should detach f and remove attribute when hover state is not "in"', () => {
    bootstrap.d(); // Function call

    // Expectations
    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
    expect(b).toHaveBeenCalled();
  });

  // Test case 2: When hover state is 'in'
  test('should not detach f and remove attribute when hover state is "in"', () => {
    e.hoverState = 'in'; // Setting hoverState to 'in'
    bootstrap.d(); // Function call

    // Expectations
    expect(f.detach).not.toHaveBeenCalled();
    expect(e.$element.removeAttr).not.toHaveBeenCalled();
    expect(e.$element.trigger).not.toHaveBeenCalled();
    expect(b).toHaveBeenCalled();
  });
});
