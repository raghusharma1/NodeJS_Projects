// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

describe("Bootstrap Minified Function Tests", () => {
    
    let originalDetachFunction;
    let originalTriggerFunction;
    let originalRemoveAttrFunction;
    
    beforeAll(() => {
        // Mocking the dependencies
        originalDetachFunction = global.f.detach;
        originalTriggerFunction = global.$.fn.trigger;
        originalRemoveAttrFunction = global.$.fn.removeAttr;
        
        global.f = {detach: jest.fn()};
        global.$.fn.trigger = jest.fn();
        global.$.fn.removeAttr = jest.fn();
    });

    afterAll(() => {
        // Restoring the original functions after the tests
        global.f.detach = originalDetachFunction;
        global.$.fn.trigger = originalTriggerFunction;
        global.$.fn.removeAttr = originalRemoveAttrFunction;
    });

    test("Should call detach, trigger and removeAttr when hoverState is not 'in'", () => {
        const e = { hoverState: 'out', $element: global.$('<div></div>'), type: 'test' };
        const b = true;
        
        bootstrap.d();
        
        expect(global.f.detach).toHaveBeenCalledTimes(1);
        expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
        expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
    });

    test("Should not call detach, trigger and removeAttr when hoverState is 'in'", () => {
        const e = { hoverState: 'in', $element: global.$('<div></div>'), type: 'test' };
        const b = false;
        
        bootstrap.d();
        
        expect(global.f.detach).not.toHaveBeenCalled();
        expect(e.$element.trigger).not.toHaveBeenCalled();
        expect(e.$element.removeAttr).not.toHaveBeenCalled();
    });

});
