// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Define the test suite
describe('d function from bootstrap.min.js', () => {

  // This will run before each test case
  beforeEach(() => {
    // Setting up the variables and functions that d function depends on
    global.e = {
      hoverState: 'out',
      $element: {
        removeAttr: jest.fn(),
        trigger: jest.fn()
      },
      type: 'testType'
    };

    global.f = {
      detach: jest.fn()
    };

    global.b = jest.fn();
  });

  // Test case 1: Check if f.detach was called when hoverState is not 'in'
  test('should call f.detach when hoverState is not in', () => {
    bootstrap.d();
    expect(global.f.detach).toHaveBeenCalled();
  });

  // Test case 2: Check if $element.removeAttr was called with 'aria-describedby'
  test('should call $element.removeAttr with aria-describedby', () => {
    bootstrap.d();
    expect(global.e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
  });

  // Test case 3: Check if $element.trigger was called with 'hidden.bs.testType'
  test('should call $element.trigger with hidden.bs.testType', () => {
    bootstrap.d();
    expect(global.e.$element.trigger).toHaveBeenCalledWith('hidden.bs.testType');
  });

  // Test case 4: Check if b was called when b is defined
  test('should call b when b is defined', () => {
    bootstrap.d();
    expect(global.b).toHaveBeenCalled();
  });

});
