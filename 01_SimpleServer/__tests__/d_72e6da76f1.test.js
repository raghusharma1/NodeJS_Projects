// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

describe('bootstrap.min.js tests', () => {
  let e;
  let b;
  let f;

  beforeEach(() => {
    f = {
      detach: jest.fn()
    };
    e = {
      hoverState: 'in',
      $element: {
        removeAttr: jest.fn().mockReturnThis(),
        trigger: jest.fn().mockReturnThis()
      },
      type: 'test'
    };
    b = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call f.detach and e.$element.removeAttr if hoverState is not "in"', () => {
    e.hoverState = 'out';
    bootstrap.d();
    expect(f.detach).toHaveBeenCalledTimes(1);
    expect(e.$element.removeAttr).toHaveBeenCalledWith('aria-describedby');
  });

  test('should not call f.detach and e.$element.removeAttr if hoverState is "in"', () => {
    bootstrap.d();
    expect(f.detach).toHaveBeenCalledTimes(0);
    expect(e.$element.removeAttr).toHaveBeenCalledTimes(0);
  });

  test('should call e.$element.trigger with correct argument', () => {
    e.hoverState = 'out';
    bootstrap.d();
    expect(e.$element.trigger).toHaveBeenCalledWith('hidden.bs.' + e.type);
  });

  test('should call b if b is a function', () => {
    bootstrap.d();
    expect(b).toHaveBeenCalledTimes(1);
  });

  test('should not call b if b is not a function', () => {
    b = 'not a function';
    bootstrap.d();
    expect(b).toHaveBeenCalledTimes(0);
  });
});
