// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require("../js/bootstrap.min.js");

// Define the test suite
describe("d function", () => {
  let e, f, b;

  // Run before each test
  beforeEach(() => {
    // Mock the dependencies
    e = {
      hoverState: "out",
      $element: {
        removeAttr: jest.fn(),
        trigger: jest.fn(),
      },
      type: "test",
    };
    f = { detach: jest.fn() };
    b = jest.fn();
  });

  // Test case 1: Ensuring correct behavior when hoverState is not equal to 'in'
  test("should call appropriate methods when hoverState is not equal to 'in'", () => {
    bootstrap.d();

    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith("aria-describedby");
    expect(e.$element.trigger).toHaveBeenCalledWith("hidden.bs.test");
    expect(b).toHaveBeenCalled();
  });

  // Test case 2: Ensuring no methods are called when hoverState is equal to 'in'
  test("should not call any methods when hoverState is equal to 'in'", () => {
    e.hoverState = "in";

    bootstrap.d();

    expect(f.detach).not.toHaveBeenCalled();
    expect(e.$element.removeAttr).not.toHaveBeenCalled();
    expect(e.$element.trigger).not.toHaveBeenCalled();
    expect(b).not.toHaveBeenCalled();
  });
});
