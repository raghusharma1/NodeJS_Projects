// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=d_39bb39108d
ROOST_METHOD_SIG_HASH=d_72e6da76f1


*/

// ********RoostGPT********
// Import the dependencies
const bootstrap = require("../js/bootstrap.min.js");

// Define the test suite
describe("d function", () => {
  let e, f, b;

  // Set up the necessary preconditions
  beforeEach(() => {
    e = {
      hoverState: "out",
      $element: {
        removeAttr: jest.fn().mockName("removeAttr"),
        trigger: jest.fn().mockName("trigger"),
      },
      type: "test",
    };

    f = {
      detach: jest.fn().mockName("detach"),
    };

    b = jest.fn().mockName("b");
  });

  // Define the test cases
  test("Should invoke f.detach, e.$element.removeAttr and e.$element.trigger when e.hoverState is not 'in'", () => {
    bootstrap.d(e, f, b);

    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith("aria-describedby");
    expect(e.$element.trigger).toHaveBeenCalledWith("hidden.bs.test");
    expect(b).not.toHaveBeenCalled();
  });

  test("Should invoke f.detach, e.$element.removeAttr, e.$element.trigger and b when e.hoverState is 'in'", () => {
    e.hoverState = "in";
    bootstrap.d(e, f, b);

    expect(f.detach).toHaveBeenCalled();
    expect(e.$element.removeAttr).toHaveBeenCalledWith("aria-describedby");
    expect(e.$element.trigger).toHaveBeenCalledWith("hidden.bs.test");
    expect(b).toHaveBeenCalled();
  });
});
