// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement;
  let mockData;

  // Setup for Tests
  beforeEach(() => {
    mockElement = {
      each: jest.fn().mockImplementation((callback) => callback()),
      data: jest.fn()
    };

    mockData = {
      "bs.scrollspy": 'testData'
    };

    global.a = jest.fn().mockReturnValue(mockElement);
    global.b = jest.fn();
  });

  // Teardown after Tests
  afterEach(() => {
    jest.clearAllMocks();
  });

  // Test Case 1: Check if function calls 'each' method
  test('should call each method of this object', () => {
    bootstrap.c.call(mockElement, 'test');
    expect(mockElement.each).toHaveBeenCalled();
  });

  // Test Case 2: Check if data method is called with correct argument
  test('should call data method with "bs.scrollspy" argument', () => {
    mockElement.data.mockReturnValue(mockData);
    bootstrap.c.call(mockElement, 'test');
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy");
  });

  // Test Case 3: Check if new b is created when e does not exist
  test('should create a new b when e does not exist', () => {
    mockElement.data.mockReturnValue({});
    bootstrap.c.call(mockElement, 'test');
    expect(global.b).toHaveBeenCalled();
  });

  // Test Case 4: Check if e[c] method is called when c is a string
  test('should call method e[c] when c is a string', () => {
    const mockE = { test: jest.fn() };
    mockElement.data.mockReturnValue({ "bs.scrollspy": mockE });
    bootstrap.c.call(mockElement, 'test');
    expect(mockE.test).toHaveBeenCalled();
  });
});
