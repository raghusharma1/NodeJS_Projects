// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement;
  let mockData;

  // Setup for all tests
  beforeAll(() => {
    mockData = {
      "bs.scrollspy": {}
    };
    mockElement = {
      each: jest.fn((callback) => callback()),
      data: jest.fn((key) => mockData[key])
    };
  });

  // Test case 1: Check if "each" function is called on passed object
  test('should call "each" function on passed object', () => {
    bootstrap.c(mockElement);
    expect(mockElement.each).toHaveBeenCalled();
  });

  // Test case 2: Check if "data" function is called with "bs.scrollspy"
  test('should call "data" function with "bs.scrollspy"', () => {
    bootstrap.c(mockElement);
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy");
  });

  // Test case 3: Check if "data" function is called with "bs.scrollspy" and new object when "bs.scrollspy" is not set
  test('should call "data" function with "bs.scrollspy" and new object when "bs.scrollspy" is not set', () => {
    mockData = {};
    bootstrap.c(mockElement);
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy", expect.any(Object));
  });

  // Test case 4: Check if "c" function is called when string is passed as parameter
  test('should call "c" function when string is passed as parameter', () => {
    mockData = {
      "bs.scrollspy": {
        c: jest.fn()
      }
    };
    bootstrap.c(mockElement, "c");
    expect(mockData["bs.scrollspy"].c).toHaveBeenCalled();
  });

  // Cleanup after all tests
  afterAll(() => {
    mockElement = null;
    mockData = null;
  });
});
