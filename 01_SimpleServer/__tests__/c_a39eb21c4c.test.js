// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement;
  let mockData;

  // Setup for Tests
  beforeEach(() => {
    mockElement = {
      each: jest.fn((callback) => callback()),
      data: jest.fn().mockImplementation((key, value) => {
        if (value) {
          mockData[key] = value;
        }
        return mockData[key];
      }),
    };

    mockData = {
      'bs.scrollspy': null,
    };

    global.a = jest.fn(() => mockElement);
  });

  // Test Case 1: Check if the function 'c' is defined
  test('c function is defined', () => {
    expect(bootstrap.c).toBeDefined();
  });

  // Test Case 2: Check if the function 'c' is called with correct parameters
  test('c function is called with correct parameters', () => {
    const mockParam = 'test';
    bootstrap.c(mockParam);
    expect(a).toHaveBeenCalledWith(mockParam);
    expect(mockElement.each).toHaveBeenCalled();
  });

  // Test Case 3: Check if new data is assigned correctly when 'bs.scrollspy' data doesn't exist
  test('new data is assigned correctly when bs.scrollspy data does not exist', () => {
    const mockParam = 'test';
    bootstrap.c(mockParam);
    expect(mockElement.data).toHaveBeenCalledWith('bs.scrollspy', expect.anything());
  });

  // Test Case 4: Check if function c is called when 'bs.scrollspy' data exists and it is a string
  test('function c is called when bs.scrollspy data exists and it is a string', () => {
    const mockParam = 'test';
    mockData['bs.scrollspy'] = {
      c: jest.fn(),
    };
    bootstrap.c(mockParam);
    expect(mockData['bs.scrollspy'].c).toHaveBeenCalled();
  });
});
