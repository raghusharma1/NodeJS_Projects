// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  // Mocking dependencies
  let mockElement = {
    data: jest.fn(),
  };
  let mockThis = {
    each: jest.fn((callback) => callback()),
  };
  let mockA = jest.fn(() => mockElement);
  let mockB = jest.fn();
  let mockF;

  beforeEach(() => {
    mockElement.data.mockClear();
    mockThis.each.mockClear();
    mockA.mockClear();
    mockB.mockClear();
  });

  beforeAll(() => {
    // Mocking global functions
    global.a = mockA;
    global.b = mockB;
  });

  // Test Case 1: When c is object
  test('When c is an object', () => {
    let testObject = { test: 'test' };
    bootstrap.c.call(mockThis, testObject);
    expect(mockThis.each).toBeCalled();
    expect(mockA).toBeCalled();
    expect(mockElement.data).toBeCalledWith('bs.scrollspy', expect.anything());
  });

  // Test Case 2: When c is string
  test('When c is a string', () => {
    let testString = 'test';
    bootstrap.c.call(mockThis, testString);
    expect(mockThis.each).toBeCalled();
    expect(mockA).toBeCalled();
    expect(mockElement.data).toBeCalled();
  });

  // Test Case 3: When c is neither string nor object
  test('When c is neither a string nor an object', () => {
    let testNumber = 123;
    bootstrap.c.call(mockThis, testNumber);
    expect(mockThis.each).toBeCalled();
    expect(mockA).toBeCalled();
    expect(mockElement.data).toBeCalled();
  });
});
