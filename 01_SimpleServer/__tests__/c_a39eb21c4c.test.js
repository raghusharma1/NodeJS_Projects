// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Import the function to be tested
const c = require('../js/bootstrap.min.js').c;

describe('c method in bootstrap.min.js', () => {
  // Set up
  let mockData;

  beforeEach(() => {
    // Mock data object with data method
    mockData = {
      data: jest.fn().mockImplementation((key, val) => {
        if (val) {
          mockData[key] = val;
        }
        return mockData[key];
      }),
      each: jest.fn((callback) => callback())
    };

    // Mock global a function
    global.a = jest.fn().mockReturnValue(mockData);
  });

  afterEach(() => {
    // Clean up
    jest.resetAllMocks();
  });

  test('should call each method on this object', () => {
    c.call(mockData, 'bs.scrollspy');
    expect(mockData.each).toHaveBeenCalled();
  });

  test('should create new instance of b with this and f as arguments if e is undefined', () => {
    const mockB = jest.fn();
    global.b = mockB;

    c.call(mockData, 'bs.scrollspy');
    expect(mockB).toHaveBeenCalledWith(mockData, 'bs.scrollspy');
  });

  test('should call e[c] if c is string and e is defined', () => {
    const mockE = {
      'bs.scrollspy': jest.fn()
    };
    mockData.data('bs.scrollspy', mockE);

    c.call(mockData, 'bs.scrollspy');
    expect(mockE['bs.scrollspy']).toHaveBeenCalled();
  });
});
