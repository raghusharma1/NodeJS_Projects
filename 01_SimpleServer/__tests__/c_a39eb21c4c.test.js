// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement;
  let mockData;

  // Setup for Tests
  beforeEach(() => {
    mockElement = {
      each: jest.fn().mockImplementation((callback) => callback()),
      data: jest.fn()
    };

    mockData = {
      "bs.scrollspy": 'testData'
    };

    global.a = jest.fn().mockReturnValue(mockElement);
    global.b = jest.fn();

    mockElement.data.mockReturnValueOnce(mockData).mockReturnValueOnce(mockElement);
  });

  // Test Case 1: Check if function c is defined
  test('c function is defined', () => {
    expect(bootstrap.c).toBeDefined();
  });

  // Test Case 2: Check if function c calls each function on this
  test('c function calls each function on this', () => {
    bootstrap.c.call(mockElement, 'test');
    expect(mockElement.each).toHaveBeenCalled();
  });

  // Test Case 3: Check if function c calls data function on the element with "bs.scrollspy"
  test('c function calls data function on the element with "bs.scrollspy"', () => {
    bootstrap.c.call(mockElement, 'test');
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy");
  });

  // Test Case 4: Check if function c calls data function on the element with new b object when "bs.scrollspy" is not set
  test('c function calls data function on the element with new b object when "bs.scrollspy" is not set', () => {
    mockElement.data.mockReturnValueOnce(null);
    bootstrap.c.call(mockElement, 'test');
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy", new b(mockElement, 'test'));
  });

  // Test Case 5: Check if function c calls the function on e when c is a string
  test('c function calls the function on e when c is a string', () => {
    const mockFunction = jest.fn();
    mockData["bs.scrollspy"] = mockFunction;
    bootstrap.c.call(mockElement, 'test');
    expect(mockFunction).toHaveBeenCalled();
  });
});
