// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing the required dependencies
const { c } = require('../js/bootstrap.min.js');

describe('bootstrap.min.js', () => {

  // Setting up the mock functions for the dependencies
  let mockData;
  beforeEach(() => {
    mockData = jest.fn();

    global.a = jest.fn().mockImplementation(() => {
      return {
        each: jest.fn().mockImplementation((cb) => cb()),
        data: mockData,
        scrollTop: jest.fn()
      };
    });

    global.b = jest.fn();
  });

  test('c function - success case', () => {
    const mockNewB = jest.fn();
    const mockEC = jest.fn();

    mockData.mockReturnValueOnce(undefined)
      .mockReturnValueOnce({
        c: mockEC
      });

    global.b.mockReturnValueOnce(mockNewB);

    c('test');

    expect(a).toBeCalled();
    expect(mockData).toBeCalledWith('bs.scrollspy');
    expect(b).toBeCalledWith(expect.anything(), 'test');
    expect(mockNewB).toBeCalled();
    expect(mockData).toBeCalledWith('bs.scrollspy', mockNewB);
    expect(mockEC).not.toBeCalled();
  });

  test('c function - c is a string case', () => {
    const mockEC = jest.fn();

    mockData.mockReturnValueOnce({
      c: mockEC
    });

    c('test');

    expect(a).toBeCalled();
    expect(mockData).toBeCalledWith('bs.scrollspy');
    expect(b).not.toBeCalled();
    expect(mockEC).toBeCalled();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });
});
