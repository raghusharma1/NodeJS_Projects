// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement;
  
  // Setting up the mock data before each test case
  beforeEach(() => {
    mockElement = {
      each: jest.fn((callback) => callback()),
      data: jest.fn(),
    };
    global.a = jest.fn(() => mockElement);
    global.b = jest.fn();
  });

  // Test case 1: Ensuring the each function is called
  test('should call each function of the element', () => {
    bootstrap.c();

    expect(mockElement.each).toHaveBeenCalled();
  });

  // Test case 2: Ensuring the data function is called with correct parameter
  test('should call data function with "bs.scrollspy"', () => {
    bootstrap.c();

    expect(mockElement.data).toHaveBeenCalledWith('bs.scrollspy');
  });

  // Test case 3: Ensuring the a function is called
  test('should call a function', () => {
    bootstrap.c();

    expect(global.a).toHaveBeenCalled();
  });

  // Test case 4: Ensuring the new instance of b is created when e is undefined
  test('should create new instance of b when e is undefined', () => {
    mockElement.data.mockReturnValueOnce(undefined);

    bootstrap.c();

    expect(global.b).toHaveBeenCalled();
  });

  // Test case 5: Ensuring the e[c] function is called when c is string
  test('should call e[c] function when c is string', () => {
    const mockE = { dummyFunction: jest.fn() };
    mockElement.data.mockReturnValueOnce(mockE);

    bootstrap.c('dummyFunction');

    expect(mockE.dummyFunction).toHaveBeenCalled();
  });
});
