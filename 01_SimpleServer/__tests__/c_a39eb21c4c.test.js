// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  // Mocking the data function
  const mockDataFn = jest.fn();
  // Mocking the each function
  const mockEachFn = jest.fn((callback) => {
    callback();
    return {
      data: mockDataFn,
    };
  });
  // Mocking the scrollTop function
  const mockScrollTopFn = jest.fn(() => 100);
  // Mocking the height function
  const mockHeightFn = jest.fn(() => 200);
  // Mocking the global a function
  global.a = jest.fn(() => ({
    each: mockEachFn,
    scrollTop: mockScrollTopFn,
    height: mockHeightFn,
  }));
  // Mocking the global b function
  global.b = jest.fn();

  // Test case 1: Checking if the function is called with correct parameters
  test('Function is called with correct parameters', () => {
    const param = 'testParam';
    bootstrap.c(param);
    expect(mockEachFn).toHaveBeenCalled();
  });

  // Test case 2: Checking if the new b object is created when e is undefined
  test('New b object is created when e is undefined', () => {
    const param = {};
    bootstrap.c(param);
    expect(global.b).toHaveBeenCalled();
  });

  // Test case 3: Checking if the function e[c] is called when c is a string
  test('Function e[c] is called when c is a string', () => {
    const param = 'testFunction';
    const testFunction = jest.fn();
    mockDataFn.mockReturnValueOnce({
      testFunction,
    });
    bootstrap.c(param);
    expect(testFunction).toHaveBeenCalled();
  });
});
