// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  // Mocking dependencies
  let mockData = {
    "bs.scrollspy": { new: jest.fn() }
  };
  
  beforeEach(() => {
    global.a = jest.fn().mockReturnValue({
      each: jest.fn().mockImplementationOnce((fn) => fn()),
      data: jest.fn().mockReturnValue(mockData),
      scrollTop: jest.fn()
    });

    global.b = jest.fn();

    mockData["bs.scrollspy"].new.mockClear();
  });

  // Test case 1: when c is an object
  test('should create new instance of bs.scrollspy when c is an object', () => {
    bootstrap.c({ key: 'value' });

    expect(global.a).toHaveBeenCalled();
    expect(mockData["bs.scrollspy"].new).toHaveBeenCalledWith(expect.anything(), { key: 'value' });
  });

  // Test case 2: when c is a string
  test('should call method on bs.scrollspy instance when c is a string', () => {
    let spyInstance = { myMethod: jest.fn() };
    mockData["bs.scrollspy"] = spyInstance;

    bootstrap.c('myMethod');

    expect(global.a).toHaveBeenCalled();
    expect(spyInstance.myMethod).toHaveBeenCalled();
  });

  // Test case 3: when c is neither an object nor a string
  test('should not call any method when c is neither an object nor a string', () => {
    let spyInstance = { myMethod: jest.fn() };
    mockData["bs.scrollspy"] = spyInstance;

    bootstrap.c(123);

    expect(global.a).toHaveBeenCalled();
    expect(spyInstance.myMethod).not.toHaveBeenCalled();
  });
});
