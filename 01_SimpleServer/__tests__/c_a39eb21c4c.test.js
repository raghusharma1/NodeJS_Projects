// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let input, result;

  // Setting up the input data
  beforeAll(() => {
    input = 'sampleData';
  });

  // Test Case 1: Checking the return type of function c
  test('should return an instance of Object', () => {
    result = bootstrap.c(input);
    expect(typeof result).toBe('object');
  });

  // Test Case 2: Checking if function c is called with correct input
  test('should invoke function c with correct input', () => {
    const spy = jest.spyOn(bootstrap, 'c');
    bootstrap.c(input);
    expect(spy).toHaveBeenCalledWith(input);
  });

  // Test Case 3: Checking if 'each' function is called within function c
  test('should call the internal function each', () => {
    const spy = jest.spyOn(result, 'each');
    bootstrap.c(input);
    expect(spy).toHaveBeenCalled();
  });

  // Test Case 4: Checking if 'data' function is called within function c
  test('should call the internal function data', () => {
    const spy = jest.spyOn(result, 'data');
    bootstrap.c(input);
    expect(spy).toHaveBeenCalled();
  });

  // Test Case 5: Checking if 'c' function is called within function c
  test('should call the internal function c', () => {
    const spy = jest.spyOn(result, 'c');
    bootstrap.c(input);
    expect(spy).toHaveBeenCalled();
  });

  // Cleaning up the spy created
  afterEach(() => {
    jest.clearAllMocks();
  });
});
