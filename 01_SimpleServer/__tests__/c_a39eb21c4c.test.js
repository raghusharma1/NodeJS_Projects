// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite
describe('Test cases for c method in bootstrap.min.js', () => {
    
    // Setup
    let mockData = {
        data: jest.fn(),
        each: jest.fn()
    };

    beforeEach(() => {
        global.a = jest.fn(() => mockData);
        global.b = jest.fn();
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    // Test case 1: c method should call each function on the object returned by a()
    test('c method should call each function on the object returned by a()', () => {
        bootstrap.c('test');
        expect(mockData.each).toHaveBeenCalled();
    });

    // Test case 2: c method should create a new instance of b and assign it to e if e is not defined
    test('c method should create a new instance of b and assign it to e if e is not defined', () => {
        let instance = {};
        global.b = jest.fn(() => instance);
        mockData.data.mockReturnValueOnce(null);
        bootstrap.c('test');
        expect(mockData.data).toHaveBeenCalledWith('bs.scrollspy', instance);
    });

    // Test case 3: c method should call the function named by the string c on the object e
    test('c method should call the function named by the string c on the object e', () => {
        let e = { test: jest.fn() };
        mockData.data.mockReturnValueOnce(e);
        bootstrap.c('test');
        expect(e.test).toHaveBeenCalled();
    });
});
