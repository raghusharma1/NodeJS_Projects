// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
const c = require('../js/bootstrap.min.js');

describe('c Function', () => {
    let a, b, d, e, f;

    beforeEach(() => {
        a = jest.fn();
        b = jest.fn();
        d = { data: jest.fn() };
        e = { c: jest.fn() };
        f = {};
    });

    test('should call each method of this', () => {
        const thisMock = { each: jest.fn() };
        c.call(thisMock, {});
        expect(thisMock.each).toHaveBeenCalled();
    });

    test('should call a function with this', () => {
        const thisMock = { each: jest.fn() };
        c.call(thisMock, {});
        expect(a).toHaveBeenCalledWith(thisMock);
    });

    test('should call data method of d with "bs.scrollspy"', () => {
        const thisMock = { each: jest.fn() };
        c.call(thisMock, {});
        expect(d.data).toHaveBeenCalledWith('bs.scrollspy');
    });

    test('should call data method of d with "bs.scrollspy" and new b(this,f)', () => {
        const thisMock = { each: jest.fn() };
        c.call(thisMock, {});
        expect(d.data).toHaveBeenCalledWith('bs.scrollspy', new b(thisMock, f));
    });

    test('should call c method of e if c is string', () => {
        const thisMock = { each: jest.fn() };
        c.call(thisMock, 'string');
        expect(e.c).toHaveBeenCalled();
    });
});
