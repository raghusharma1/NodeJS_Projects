// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement, mockData;
  
  // Setup before each test
  beforeEach(() => {
    mockElement = {
      each: jest.fn((callback) => callback()),
      data: jest.fn().mockImplementation((key, value) => {
        if (value !== undefined) {
          mockData[key] = value;
        }
        return mockData[key];
      }),
      height: jest.fn().mockReturnValue(100)
    };
    
    mockData = {
      "bs.scrollspy": null
    };
    
    jest.spyOn(global, 'a').mockImplementation((selector) => {
      if (selector === mockElement) {
        return mockElement;
      }
    });
    
    global.b = jest.fn().mockImplementation((element, options) => {
      return {};
    });
  });
  
  // Cleanup after each test
  afterEach(() => {
    jest.restoreAllMocks();
  });

  // Test case 1: When c is an object
  test('When c is an object', () => {
    const obj = { test: 'test' };
    bootstrap.c.call(mockElement, obj);
    expect(mockElement.each).toHaveBeenCalled();
    expect(mockElement.data).toHaveBeenCalledWith('bs.scrollspy', expect.anything());
    expect(global.a).toHaveBeenCalledWith(mockElement);
    expect(global.b).toHaveBeenCalledWith(mockElement, obj);
  });

  // Test case 2: When c is a string
  test('When c is a string', () => {
    const str = 'test';
    const spyObject = { [str]: jest.fn() };
    mockData['bs.scrollspy'] = spyObject;
    bootstrap.c.call(mockElement, str);
    expect(mockElement.each).toHaveBeenCalled();
    expect(spyObject[str]).toHaveBeenCalled();
  });
});
