// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
const c = require('../js/bootstrap.min.js');

describe('c Function', () => {
    let a, b, d, e, f;

    beforeEach(() => {
        a = jest.fn();
        b = jest.fn();
        d = { data: jest.fn() };
        e = { c: jest.fn() };
        f = {};
    });

    it('should call each method of this', () => {
        const context = {
            each: jest.fn(callback => callback.call(d))
        };

        c.call(context, f);

        expect(context.each).toHaveBeenCalled();
    });

    it('should create new object and assign it to e if e does not exist', () => {
        const context = {
            each: jest.fn(callback => callback.call(d))
        };

        d.data.mockReturnValueOnce(undefined);

        c.call(context, f);

        expect(d.data).toHaveBeenCalledWith('bs.scrollspy', expect.any(Object));
        expect(e.c).not.toHaveBeenCalled();
    });

    it('should call method c of e if c is a string', () => {
        const context = {
            each: jest.fn(callback => callback.call(d))
        };

        d.data.mockReturnValueOnce(e);

        c.call(context, 'someMethod');

        expect(e.c).toHaveBeenCalled();
    });
});
