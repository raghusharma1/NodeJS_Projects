// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min');

describe('Bootstrap Scrollspy', () => {
  let element;

  // Setup for all tests
  beforeEach(() => {
    // Create a mock element
    element = {
      data: jest.fn(),
      each: jest.fn(),
    };

    // Mock the 'a' function used in the method
    global.a = jest.fn(() => element);
  });

  // Cleanup after all tests
  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call each function on element', () => {
    bootstrap.c('test');
    expect(element.each).toHaveBeenCalled();
  });

  test('should call data function on element', () => {
    bootstrap.c('test');
    expect(element.data).toHaveBeenCalled();
  });

  test('should handle string input', () => {
    const mockFunction = jest.fn();
    element.data.mockReturnValueOnce({ c: mockFunction });
    bootstrap.c('c');
    expect(mockFunction).toHaveBeenCalled();
  });

  test('should handle object input', () => {
    const inputObject = { key: 'value' };
    bootstrap.c(inputObject);
    expect(element.data).toHaveBeenCalledWith('bs.scrollspy', expect.any(Object));
  });
});
