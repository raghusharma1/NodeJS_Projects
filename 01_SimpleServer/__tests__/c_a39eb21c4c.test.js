// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  // Mocking the data function
  const mockData = jest.fn();

  // Mocking the each function
  const mockEach = jest.fn((callback) => {
    callback();
    return {
      data: mockData
    };
  });

  // Mocking the a function
  const mockA = jest.fn(() => {
    return {
      each: mockEach
    };
  });

  // Mocking the new b function
  const mockNewB = jest.fn();

  // Setting up the global variables
  beforeAll(() => {
    global.a = mockA;
    global.b = mockNewB;
  });

  // Cleaning up the global variables
  afterAll(() => {
    global.a = undefined;
    global.b = undefined;
  });

  // Test case 1: To test if the function works correctly with an object as parameter
  test('Should correctly execute when an object is passed as parameter', () => {
    const param = { prop: 'value' };
    bootstrap.c(param);
    expect(mockA).toHaveBeenCalled();
    expect(mockEach).toHaveBeenCalled();
    expect(mockData).toHaveBeenCalledWith('bs.scrollspy', expect.anything());
    expect(mockNewB).toHaveBeenCalled();
  });

  // Test case 2: To test if the function works correctly with a string as parameter
  test('Should correctly execute when a string is passed as parameter', () => {
    const param = 'string';
    const mockE = {
      [param]: jest.fn()
    };
    mockData.mockReturnValueOnce(mockE);
    bootstrap.c(param);
    expect(mockA).toHaveBeenCalled();
    expect(mockEach).toHaveBeenCalled();
    expect(mockData).toHaveBeenCalledWith('bs.scrollspy', expect.anything());
    expect(mockE[param]).toHaveBeenCalled();
  });
});
