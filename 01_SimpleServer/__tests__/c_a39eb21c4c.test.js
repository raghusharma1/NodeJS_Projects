// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement, mockData;
  
  // Setup before each test
  beforeEach(() => {
    mockElement = {
      each: jest.fn((callback) => callback()),
      data: jest.fn(() => mockData)
    };
    
    mockData = {
      "bs.scrollspy": {}
    };

    global.a = jest.fn(() => mockElement);
    bootstrap.b = jest.fn();
  });

  // Test case 1: Check if function c is called with an object
  test('should call each function and create new b', () => {
    const c = {};
    bootstrap.c(c);
    expect(mockElement.each).toHaveBeenCalled();
    expect(bootstrap.b).toHaveBeenCalledWith(mockElement, c);
  });

  // Test case 2: Check if function c is called with a string
  test('should call each function and call method on e', () => {
    const c = "testMethod";
    mockData["bs.scrollspy"][c] = jest.fn();
    bootstrap.c(c);
    expect(mockElement.each).toHaveBeenCalled();
    expect(mockData["bs.scrollspy"][c]).toHaveBeenCalled();
  });

  // Test case 3: Check if function c is called with neither string nor object
  test('should call each function but do nothing', () => {
    const c = 123;
    bootstrap.c(c);
    expect(mockElement.each).toHaveBeenCalled();
    expect(bootstrap.b).not.toHaveBeenCalled();
  });
});
