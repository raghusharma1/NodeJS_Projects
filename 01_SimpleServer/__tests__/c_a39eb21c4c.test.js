// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement, mockData;
  
  // Setup before each test
  beforeEach(() => {
    mockElement = {
      each: jest.fn((callback) => callback()),
      data: jest.fn().mockImplementation((key, value) => {
        if (value !== undefined) {
          mockData[key] = value;
        }
        return mockData[key];
      }),
      height: jest.fn().mockReturnValue(100)
    };
    
    mockData = {
      "bs.scrollspy": null
    };
    
    global.a = jest.fn(() => mockElement);
    global.b = jest.fn();
  });
  
  // Test cases
  test('should create new b instance when bs.scrollspy data is not present', () => {
    bootstrap.c('test');
    
    expect(mockElement.each).toHaveBeenCalled();
    expect(a).toHaveBeenCalledWith(mockElement);
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy");
    expect(b).toHaveBeenCalledWith(mockElement, 'test');
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy", expect.any(b));
  });
  
  test('should not create new b instance when bs.scrollspy data is already present', () => {
    mockData["bs.scrollspy"] = new b();
    
    bootstrap.c('test');
    
    expect(mockElement.each).toHaveBeenCalled();
    expect(a).toHaveBeenCalledWith(mockElement);
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy");
    expect(b).not.toHaveBeenCalled();
    expect(mockElement.data).not.toHaveBeenCalledWith("bs.scrollspy", expect.any(b));
  });
  
  test('should call function on e when c is a string', () => {
    const mockFunction = jest.fn();
    mockData["bs.scrollspy"] = {
      test: mockFunction
    };
    
    bootstrap.c('test');
    
    expect(mockElement.each).toHaveBeenCalled();
    expect(a).toHaveBeenCalledWith(mockElement);
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy");
    expect(mockFunction).toHaveBeenCalled();
  });

  // Cleanup after each test
  afterEach(() => {
    jest.clearAllMocks();
  });
});
