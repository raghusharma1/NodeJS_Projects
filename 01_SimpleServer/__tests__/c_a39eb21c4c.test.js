// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing the dependencies
const bootstrap = require('../js/bootstrap.min');

// Test Suite for function 'c'
describe('Function c Test Suite', () => {
  let a, b, c, d, e, f, g, h, i, j, l, n, o, p, r;

  // This will run before each test
  beforeEach(() => {
    a = jest.fn();
    b = jest.fn();
    c = jest.fn();
    d = {data: jest.fn()};
    e = jest.fn();
    f = jest.fn();
    g = jest.fn();
    h = jest.fn();
    i = jest.fn();
    j = jest.fn();
    l = jest.fn();
    n = jest.fn();
    o = jest.fn();
    p = jest.fn();
    r = jest.fn();
  });

  // Test case 1: Check if function 'c' is called with correct parameters
  test('Function c is called with correct parameters', () => {
    const param = 'test';
    bootstrap.c(param);
    expect(a).toHaveBeenCalledWith(this);
    expect(d.data).toHaveBeenCalledWith("bs.scrollspy");
    expect(e).toHaveBeenCalledWith(this, f);
    expect(d.data).toHaveBeenCalledWith("bs.scrollspy", e);
    expect(e).toHaveBeenCalledWith(c);
  });

  // Test case 2: Check if function 'c' returns correct value
  test('Function c returns correct value', () => {
    const param = 'test';
    const result = bootstrap.c(param);
    expect(result).toBeInstanceOf(Function);
  });

  // Test case 3: Check if function 'c' handles error correctly
  test('Function c handles error correctly', () => {
    const param = 'test';
    d.data.mockImplementation(() => { throw new Error('Test error'); });
    expect(() => { bootstrap.c(param); }).toThrowError('Test error');
  });
});
