// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  // Mocking the data function
  const mockDataFunc = jest.fn();
  // Mocking the each function
  const mockEachFunc = jest.fn((callback) => {
    callback();
    return {
      data: mockDataFunc,
    };
  });
  // Mocking the scrollTop function
  const mockScrollTopFunc = jest.fn(() => 100);
  // Mocking the height function
  const mockHeightFunc = jest.fn(() => 200);
  // Mocking the trigger function
  const mockTriggerFunc = jest.fn();
  // Mocking the 'a' function
  const mockAFunc = jest.fn(() => ({
    each: mockEachFunc,
    data: mockDataFunc,
    scrollTop: mockScrollTopFunc,
    height: mockHeightFunc,
    trigger: mockTriggerFunc,
  }));

  // Mocking the global 'a' function
  global.a = mockAFunc;

  // Test case 1: Check if 'a' function is called
  test('should call a function', () => {
    bootstrap.c('test');
    expect(mockAFunc).toHaveBeenCalled();
  });

  // Test case 2: Check if 'each' function is called
  test('should call each function', () => {
    bootstrap.c('test');
    expect(mockEachFunc).toHaveBeenCalled();
  });

  // Test case 3: Check if 'data' function is called
  test('should call data function with "bs.scrollspy"', () => {
    bootstrap.c('test');
    expect(mockDataFunc).toHaveBeenCalledWith('bs.scrollspy');
  });

  // Test case 4: Check if new 'b' object is created when 'e' is null
  test('should create new b object when e is null', () => {
    mockDataFunc.mockReturnValue(null);
    bootstrap.c('test');
    expect(mockDataFunc).toHaveBeenCalledWith('bs.scrollspy', expect.any(Object));
  });

  // Test case 5: Check if 'e[c]()' is called when 'c' is a string
  test('should call e[c]() when c is a string', () => {
    const mockE = { test: jest.fn() };
    mockDataFunc.mockReturnValue(mockE);
    bootstrap.c('test');
    expect(mockE.test).toHaveBeenCalled();
  });
});
