// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement;
  let mockData;

  // Setup for Tests
  beforeEach(() => {
    mockElement = {
      each: jest.fn((callback) => callback()),
      data: jest.fn().mockImplementation((key, value) => {
        if (value) {
          mockData[key] = value;
        }
        return mockData[key];
      }),
    };

    mockData = {
      'bs.scrollspy': null,
    };

    global.a = jest.fn(() => mockElement);
  });

  // Test Case 1: Check if c function works as expected with string parameter
  test('c function with string parameter', () => {
    const spy = jest.fn();
    mockData['bs.scrollspy'] = { testFunc: spy };

    bootstrap.c('testFunc');

    expect(spy).toHaveBeenCalled();
  });

  // Test Case 2: Check if c function works as expected with object parameter
  test('c function with object parameter', () => {
    const obj = { testKey: 'testValue' };

    bootstrap.c(obj);

    expect(mockElement.data).toHaveBeenCalledWith('bs.scrollspy', expect.anything());
    expect(mockData['bs.scrollspy']).toEqual(expect.objectContaining(obj));
  });

  // Test Case 3: Check if c function works as expected with non-string non-object parameter
  test('c function with non-string non-object parameter', () => {
    const num = 123;

    bootstrap.c(num);

    expect(mockElement.data).toHaveBeenCalledWith('bs.scrollspy', expect.anything());
    expect(mockData['bs.scrollspy']).toBeInstanceOf(bootstrap.b);
  });
});
