// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

// Test suite for the c function
describe('Function c test suite', () => {

  // Test case for when c is an object
  test('Should call each function and use new b when c is an object', () => {
    const eachMock = jest.fn();
    const dataMock = jest.fn(() => ({data: jest.fn()}));
    const aMock = jest.fn(() => ({each: eachMock, data: dataMock}));
    const bMock = jest.fn();

    global.a = aMock;
    global.b = bMock;

    bootstrap.c({});

    expect(eachMock).toHaveBeenCalled();
    expect(bMock).toHaveBeenCalled();
  });

  // Test case for when c is a string
  test('Should call each function and use e[c] when c is a string', () => {
    const eachMock = jest.fn();
    const dataMock = jest.fn(() => ({data: jest.fn()}));
    const aMock = jest.fn(() => ({each: eachMock, data: dataMock}));
    const bMock = jest.fn();

    global.a = aMock;
    global.b = bMock;

    bootstrap.c('test');

    expect(eachMock).toHaveBeenCalled();
    expect(dataMock).toHaveBeenCalled();
  });

  // Test case for when c is neither a string nor an object
  test('Should call each function but not call new b or e[c] when c is neither a string nor an object', () => {
    const eachMock = jest.fn();
    const dataMock = jest.fn(() => ({data: jest.fn()}));
    const aMock = jest.fn(() => ({each: eachMock, data: dataMock}));
    const bMock = jest.fn();

    global.a = aMock;
    global.b = bMock;

    bootstrap.c(123);

    expect(eachMock).toHaveBeenCalled();
    expect(bMock).not.toHaveBeenCalled();
    expect(dataMock).not.toHaveBeenCalled();
  });
});
