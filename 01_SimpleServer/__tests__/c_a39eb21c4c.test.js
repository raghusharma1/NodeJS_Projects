// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Import the function to be tested
const c = require('../js/bootstrap.min.js').c;

describe('c method in bootstrap.min.js', () => {
  let a, b, d, e, f;

  // Set up our document body
  document.body.innerHTML =
    '<div id="element1" data-bs-scrollspy="foo"></div>' +
    '<div id="element2"></div>';

  beforeEach(() => {
    a = jest.fn((selector) => {
      switch (selector) {
        case '#element1':
          return {
            each: (callback) => callback(),
            data: jest.fn(() => ({ bs: { scrollspy: 'foo' } })),
          };
        case '#element2':
          return {
            each: (callback) => callback(),
            data: jest.fn(() => ({})),
          };
        default:
          return {};
      }
    });

    b = jest.fn();
    d = { data: jest.fn() };
    e = { c: jest.fn() };
    f = 'bar';
  });

  test('should call each method on matched elements', () => {
    c.call({ each: a }, f);
    expect(a).toHaveBeenCalled();
  });

  test('should create new instance of b if no data-bs-scrollspy attribute present', () => {
    c.call({ each: a }, f);
    expect(b).toHaveBeenCalledWith('#element2', f);
  });

  test('should call c method if string argument is provided', () => {
    c.call({ each: a }, 'c');
    expect(e.c).toHaveBeenCalled();
  });
});
