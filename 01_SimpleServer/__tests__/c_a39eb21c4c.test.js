// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  // Mocking the data function
  const mockDataFn = jest.fn();
  // Mocking the each function
  const mockEachFn = jest.fn((callback) => {
    callback();
    return {
      data: mockDataFn
    }
  });
  // Mocking the scrollTop function
  const mockScrollTopFn = jest.fn(() => 100);
  // Mocking the height function
  const mockHeightFn = jest.fn(() => 200);
  // Mocking the a function
  const mockAFn = jest.fn(() => ({
    each: mockEachFn,
    scrollTop: mockScrollTopFn,
    height: mockHeightFn
  }));
  
  // Resetting all mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });

  // Test case 1 - When c is an object
  test('when c is an object', () => {
    const c = { key: 'value' };
    bootstrap.c.call({ $element: { height: mockHeightFn }, $target: { scrollTop: mockScrollTopFn } }, c);

    expect(mockEachFn).toHaveBeenCalled();
    expect(mockDataFn).toHaveBeenCalled();
    expect(mockAFn).toHaveBeenCalled();
  });

  // Test case 2 - When c is a string
  test('when c is a string', () => {
    const c = 'test';
    bootstrap.c.call({ $element: { height: mockHeightFn }, $target: { scrollTop: mockScrollTopFn } }, c);

    expect(mockEachFn).toHaveBeenCalled();
    expect(mockDataFn).toHaveBeenCalled();
    expect(mockAFn).toHaveBeenCalled();
  });
});
