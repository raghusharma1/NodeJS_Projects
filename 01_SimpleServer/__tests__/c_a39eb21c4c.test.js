// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing the required dependencies
const { c } = require('../js/bootstrap.min.js');

describe('bootstrap.min.js', () => {

  // Setting up the mock functions for the dependencies
  let element, data, each, a;
  beforeEach(() => {
    data = jest.fn();
    each = jest.fn((fn) => fn());
    a = jest.fn(() => ({ each, data }));
    element = { data, each };
  });

  // Test case 1: Ensure that the function c() creates a new scrollspy instance when one does not already exist
  test('should create a new scrollspy instance when one does not already exist', () => {
    const b = jest.fn();
    const e = undefined;
    const c = {};
    a.mockReturnValueOnce(element);
    c.mockImplementationOnce(() => e);
    data.mockReturnValueOnce(e);
    data.mockReturnValueOnce(b);
    c(c);
    expect(b).toHaveBeenCalledWith(element, c);
    expect(data).toHaveBeenCalledWith("bs.scrollspy", b);
  });

  // Test case 2: Ensure that the function c() calls the method on the existing scrollspy instance when it already exists and the method name is provided as a string
  test('should call the method on the existing scrollspy instance when it already exists and the method name is provided as a string', () => {
    const b = jest.fn();
    const e = { c: jest.fn() };
    const c = 'c';
    a.mockReturnValueOnce(element);
    data.mockReturnValueOnce(e);
    c(c);
    expect(e.c).toHaveBeenCalled();
  });

  // Test case 3: Ensure that the function c() doesn't break when the input is null
  test('should handle null input gracefully', () => {
    const c = null;
    a.mockReturnValueOnce(element);
    c(c);
    expect(each).toHaveBeenCalled();
  });
});
