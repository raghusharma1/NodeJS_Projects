// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing the dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Test suite for function c
describe('Function c Test Suite', () => {
  let a, b, c, d, e, f;

  // Setup before each test case
  beforeEach(() => {
    a = jest.fn();
    b = jest.fn();
    c = jest.fn();
    d = jest.fn();
    e = jest.fn();
    f = jest.fn();
  });

  // Test case 1: Check if function c calls the each function with correct parameters
  test('Check if function c calls the each function with correct parameters', () => {
    const eachSpy = jest.spyOn(bootstrap, 'each');
    bootstrap.c('test');
    expect(eachSpy).toHaveBeenCalledWith(expect.any(Function));
  });

  // Test case 2: Check if function c calls the a function with correct parameters
  test('Check if function c calls the a function with correct parameters', () => {
    const aSpy = jest.spyOn(bootstrap, 'a');
    bootstrap.c('test');
    expect(aSpy).toHaveBeenCalledWith('test');
  });

  // Test case 3: Check if function c calls the d.data function with correct parameters
  test('Check if function c calls the d.data function with correct parameters', () => {
    const dataSpy = jest.spyOn(bootstrap.d, 'data');
    bootstrap.c('test');
    expect(dataSpy).toHaveBeenCalledWith('bs.scrollspy');
  });

  // Test case 4: Check if function c calls the e.c function with correct parameters
  test('Check if function c calls the e.c function with correct parameters', () => {
    const cSpy = jest.spyOn(bootstrap.e, 'c');
    bootstrap.c('test');
    expect(cSpy).toHaveBeenCalledWith(expect.any(Function));
  });

  // Test case 5: Check if function c returns the correct output
  test('Check if function c returns the correct output', () => {
    const output = bootstrap.c('test');
    expect(output).toEqual(expect.anything());
  });
});
