// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing the required dependencies
const { c } = require('../js/bootstrap.min.js');

describe('bootstrap.min.js', () => {

  // Setting up the mock functions for the dependencies
  let element, data, each, a;
  
  beforeEach(() => {
    data = jest.fn();
    each = jest.fn((fn) => fn());
    a = jest.fn(() => ({ each, data }));
    element = { data };
  });

  // Reset all the mocks after each test
  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call each function on the element with the passed parameter', () => {
    const param = {};

    c.call(element, param);
    
    expect(a).toHaveBeenCalled();
    expect(each).toHaveBeenCalled();
  });

  test('should create new data if it does not exist', () => {
    const param = {};
    data.mockReturnValueOnce(undefined);

    c.call(element, param);

    expect(data).toHaveBeenCalledTimes(2);
  });

  test('should call the function if string is passed as parameter', () => {
    const param = 'test';
    const e = { [param]: jest.fn() };
    data.mockReturnValueOnce(e);

    c.call(element, param);

    expect(e[param]).toHaveBeenCalled();
  });

});
