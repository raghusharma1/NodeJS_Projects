// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let input, result;

  // Setting up the input data
  beforeAll(() => {
    input = 'sampleData';
  });

  // Test Case 1: Checking the return type of function
  test('It should return an instance of Object', () => {
    result = bootstrap.c(input);
    expect(typeof result).toBe('object');
  });

  // Test Case 2: Checking if the function is called with correct input
  test('It should be called with correct input', () => {
    const spy = jest.spyOn(bootstrap, 'c');
    bootstrap.c(input);
    expect(spy).toHaveBeenCalledWith(input);
  });

  // Test Case 3: Checking if 'bs.scrollspy' data attribute is set correctly
  test('It should set data attribute "bs.scrollspy" correctly', () => {
    result = bootstrap.c(input);
    expect(result.data('bs.scrollspy')).toBeDefined();
  });

  // Test Case 4: Checking if 'string' type input is handled correctly
  test('It should handle "string" type input correctly', () => {
    const spy = jest.spyOn(bootstrap, 'c');
    bootstrap.c('stringInput');
    expect(spy).toHaveBeenCalled();
  });

  // Cleaning up after all tests
  afterAll(() => {
    input = null;
    result = null;
  });
});
