// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Import the function from bootstrap.min.js
const c = require('../js/bootstrap.min.js').c;

// Define the test suite
describe('Function c from bootstrap.min.js', () => {
  // This will run before each test in this describe block
  beforeEach(() => {
    // Mocking the data method of jQuery
    global.$ = jest.fn().mockReturnValue({
      data: jest.fn(),
    });
  });

  // Test case 1: Check the function with a string argument
  test('should call the function with the string argument', () => {
    const mockFunction = jest.fn();
    const mockObject = { "bs.scrollspy": mockFunction };
    global.$.mockReturnValueOnce({
      data: jest.fn().mockReturnValue(mockObject),
    });

    c('scroll');

    expect(mockFunction).toHaveBeenCalled();
  });

  // Test case 2: Check the function with an object argument
  test('should create a new instance with the object argument', () => {
    const mockFunction = jest.fn();
    const mockObject = { "bs.scrollspy": mockFunction };
    global.$.mockReturnValueOnce({
      data: jest.fn().mockReturnValue(null),
    });

    c({ scroll: 'spy' });

    expect(mockFunction).toHaveBeenCalledWith({ scroll: 'spy' });
  });

  // Test case 3: Check the function with a non-string and non-object argument
  test('should not call the function with a non-string and non-object argument', () => {
    const mockFunction = jest.fn();
    const mockObject = { "bs.scrollspy": mockFunction };
    global.$.mockReturnValueOnce({
      data: jest.fn().mockReturnValue(mockObject),
    });

    c(123);

    expect(mockFunction).not.toHaveBeenCalled();
  });
});
