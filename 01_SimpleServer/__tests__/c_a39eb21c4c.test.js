// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement, mockData;
  
  // Setup before each test
  beforeEach(() => {
    mockElement = {
      each: jest.fn((callback) => callback()),
      data: jest.fn().mockImplementation((key, value) => {
        if (value) {
          mockData[key] = value;
        }
        return mockData[key];
      }),
    };
    mockData = {};
    global.a = jest.fn(() => mockElement);
    global.b = jest.fn((el, options) => options);
  });

  // Teardown after each test
  afterEach(() => {
    jest.clearAllMocks();
  });

  // Test case 1: Check if function c assigns a new instance of b to the data store if not already present
  test('Should assign a new instance of b to the data store if not already present', () => {
    const options = { foo: 'bar' };
    bootstrap.c.call(mockElement, options);
    expect(mockElement.data).toHaveBeenCalledWith('bs.scrollspy', new b(mockElement, options));
    expect(mockElement.each).toHaveBeenCalled();
    expect(a).toHaveBeenCalledWith(mockElement);
  });

  // Test case 2: Check if function c calls a method on the instance of b in the data store if a string argument is passed
  test('Should call a method on the instance of b in the data store if a string argument is passed', () => {
    const method = 'testMethod';
    mockData['bs.scrollspy'] = { [method]: jest.fn() };
    bootstrap.c.call(mockElement, method);
    expect(mockData['bs.scrollspy'][method]).toHaveBeenCalled();
    expect(mockElement.each).toHaveBeenCalled();
    expect(a).toHaveBeenCalledWith(mockElement);
  });
});
