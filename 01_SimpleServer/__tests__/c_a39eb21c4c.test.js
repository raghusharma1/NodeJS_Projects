// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

// Test suite for the c function
describe('Function c test suite', () => {
  
  let data;
  
  // Setting up the mock data before each test
  beforeEach(() => {
    data = {
      each: jest.fn((callback) => {
        callback();
        return data;
      }),
      data: jest.fn().mockReturnValue('mockData')
    };
    global.a = jest.fn().mockReturnValue(data);
  });

  // Test case 1: Function c should call the each function from the data object
  test('Function c should call the each function from the data object', () => {
    bootstrap.c('test');
    expect(data.each).toHaveBeenCalled();
  });

  // Test case 2: Function c should call the a function with the correct argument
  test('Function c should call the a function with the correct argument', () => {
    bootstrap.c('test');
    expect(global.a).toHaveBeenCalledWith('test');
  });

  // Test case 3: Function c should call the data function from the data object
  test('Function c should call the data function from the data object', () => {
    bootstrap.c('test');
    expect(data.data).toHaveBeenCalled();
  });
  
  // Test case 4: Function c should return the correct value
  test('Function c should return the correct value', () => {
    const result = bootstrap.c('test');
    expect(result).toBe(data);
  });

  // Cleaning up after each test
  afterEach(() => {
    jest.clearAllMocks();
  });

});
