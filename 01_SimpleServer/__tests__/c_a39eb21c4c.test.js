// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
const bootstrap = require('../js/bootstrap.min.js');

// Test suite for the c function
describe('Function c test suite', () => {

  // Setup
  let testObject;

  beforeAll(() => {
    // Define the test object with the required methods and properties
    testObject = {
      each: jest.fn().mockImplementation((callback) => {
        const data = { "bs.scrollspy": "testData" };
        callback.call({ data: (key) => data[key] } );
      }),
      data: jest.fn(),
    };
    global.a = jest.fn().mockReturnValue(testObject);
  });

  afterEach(() => {
    // Clear all the mocks after each test
    jest.clearAllMocks();
  });

  // Test case 1
  test('should call each method with a function and call data method with "bs.scrollspy"', () => {
    bootstrap.c('test');
    expect(testObject.each).toHaveBeenCalled();
    expect(testObject.data).toHaveBeenCalledWith("bs.scrollspy");
  });

  // Test case 2
  test('should call each method with a function and call data method with "bs.scrollspy" and a new object', () => {
    bootstrap.c({ key: 'value' });
    expect(testObject.each).toHaveBeenCalled();
    expect(testObject.data).toHaveBeenCalledWith("bs.scrollspy", expect.any(Object));
  });

  // Test case 3
  test('should throw an error if the passed argument is not a string or an object', () => {
    expect(() => {
      bootstrap.c(123);
    }).toThrow(TypeError);
  });

});
