// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement, mockData;
  
  // Setup before each test
  beforeEach(() => {
    mockElement = {
      each: jest.fn().mockImplementation((callback) => callback()),
      data: jest.fn()
    };
    mockData = {
      "bs.scrollspy": {}
    };
    global.a = jest.fn().mockReturnValue(mockElement);
    mockElement.data.mockReturnValueOnce(mockData).mockReturnValueOnce(mockData["bs.scrollspy"]);
  });

  // Test case 1: Check if the function is called with correct parameters
  test('should call the function with correct parameters', () => {
    const mockParam = {};
    bootstrap.c(mockParam);
    expect(a).toHaveBeenCalledWith(mockParam);
    expect(mockElement.each).toHaveBeenCalled();
  });

  // Test case 2: Check if new object is assigned when "bs.scrollspy" data does not exist
  test('should assign new object when "bs.scrollspy" data does not exist', () => {
    mockData["bs.scrollspy"] = null;
    const mockParam = {};
    bootstrap.c(mockParam);
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy", expect.any(Object));
  });

  // Test case 3: Check if "bs.scrollspy" data is used when it exists
  test('should use "bs.scrollspy" data when it exists', () => {
    const mockParam = {};
    bootstrap.c(mockParam);
    expect(mockElement.data).not.toHaveBeenCalledWith("bs.scrollspy", expect.any(Object));
  });

  // Test case 4: Check if function is called when string parameter is passed
  test('should call function when string parameter is passed', () => {
    const mockParam = "test";
    mockData["bs.scrollspy"][mockParam] = jest.fn();
    bootstrap.c(mockParam);
    expect(mockData["bs.scrollspy"][mockParam]).toHaveBeenCalled();
  });
});
