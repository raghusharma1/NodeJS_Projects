// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=c_e5ad5cd4a4
ROOST_METHOD_SIG_HASH=c_a39eb21c4c


*/

// ********RoostGPT********
// Importing necessary modules
const bootstrap = require('../js/bootstrap.min');

// Test Suite for c function
describe('c function in bootstrap.min.js', () => {
  let mockElement, mockData;
  
  // Setup before each test
  beforeEach(() => {
    mockElement = {
      each: jest.fn().mockImplementation((callback) => callback()),
      data: jest.fn()
    };
    mockData = {
      "bs.scrollspy": 'testData'
    };
    global.a = jest.fn().mockReturnValue(mockElement);
  });

  // Test Case 1: check if 'each' function is called on the passed element
  test('should call each function on the element', () => {
    bootstrap.c('testData');
    expect(mockElement.each).toHaveBeenCalled();
  });

  // Test Case 2: check if 'data' function is called with correct parameter
  test('should call data function with "bs.scrollspy"', () => {
    mockElement.data.mockReturnValueOnce(mockData);
    bootstrap.c('testData');
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy");
  });

  // Test Case 3: check if 'data' function is called with new data
  test('should call data function with new object if bs.scrollspy is not available', () => {
    mockData = {};
    mockElement.data.mockReturnValueOnce(mockData);
    bootstrap.c('testData');
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy", expect.any(Object));
  });

  // Test Case 4: check if 'data' function is called with string if string is passed as parameter
  test('should call data function with string if string is passed as parameter', () => {
    bootstrap.c('string');
    expect(mockElement.data).toHaveBeenCalledWith("bs.scrollspy", expect.any(String));
  });
});
