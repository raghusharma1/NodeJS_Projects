// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min.js');

// Test Suite for function f
describe('Function f', () => {

  // Setup common variables or environment before each test
  beforeEach(() => {
    document.body.innerHTML = `<div id="element"></div>`;
    global.g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      end: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };
    global.b = {
      addClass: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };
    global.e = jest.fn();
  });

  // Test case 1
  test('should call the appropriate functions with correct arguments', () => {
    f();
    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.attr).toHaveBeenCalledWith('aria-expanded', false);
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(e).toHaveBeenCalled();
  });

  // Test case 2
  test('should handle the fade and in classes correctly based on h', () => {
    global.h = true;
    f();
    expect(b.addClass).toHaveBeenCalledWith('in');
    global.h = false;
    f();
    expect(b.removeClass).toHaveBeenCalledWith('fade');
  });
});
