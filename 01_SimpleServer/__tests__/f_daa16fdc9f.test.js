// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing necessary modules
const $ = require('jquery');
global.$ = $;
const bootstrap = require('../js/bootstrap.min.js');

describe('Bootstrap Min Function', () => {
  let b, g, e;

  beforeEach(() => {
    // Create some mock jQuery elements
    b = $(`<div class="dropdown-menu"></div>`);
    g = $(`<div class="active"></div>`);
    e = jest.fn();

    // Append them to the document
    document.body.innerHTML = '';
    document.body.append(b.get(0));
    document.body.append(g.get(0));

    // Mock the necessary jQuery functions
    $.fn.removeClass = jest.fn();
    $.fn.find = jest.fn();
    $.fn.end = jest.fn();
    $.fn.attr = jest.fn();
    $.fn.addClass = jest.fn();
    $.fn.parent = jest.fn();
    $.fn.closest = jest.fn();

    // Mock the 'this' context of the function
    bootstrap.f = bootstrap.f.bind({$element: b});
  });

  test('should remove "active" class from g and add it to b', () => {
    bootstrap.f();
    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(b.addClass).toHaveBeenCalledWith('active');
  });

  test('should set aria-expanded to false for g and true for b', () => {
    bootstrap.f();
    expect(g.find().attr).toHaveBeenCalledWith('aria-expanded', false);
    expect(b.find().attr).toHaveBeenCalledWith('aria-expanded', true);
  });

  test('should call function e', () => {
    bootstrap.f(e);
    expect(e).toHaveBeenCalled();
  });
});
