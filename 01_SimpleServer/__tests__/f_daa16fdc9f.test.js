// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min');

// Test suite for function f
describe('Testing f function in bootstrap.min.js', () => {
  let b, g, e;

  // beforeEach function to initialize variables before each test case
  beforeEach(() => {
    b = {
      addClass: jest.fn(),
      removeClass: jest.fn(),
      parent: jest.fn(),
      find: jest.fn(),
      closest: jest.fn(),
      attr: jest.fn(),
    };

    g = {
      removeClass: jest.fn(),
      find: jest.fn(),
      attr: jest.fn(),
    };

    e = jest.fn();
  });

  // Test case 1: Testing if the function calls the necessary methods and functions
  test('f function calls the necessary methods and functions', () => {
    // Call the function with the mock objects
    f.call({ $element: b }, g, e);

    // Check if the necessary methods and functions were called
    expect(b.addClass).toHaveBeenCalled();
    expect(b.removeClass).toHaveBeenCalled();
    expect(b.parent).toHaveBeenCalled();
    expect(b.find).toHaveBeenCalled();
    expect(b.closest).toHaveBeenCalled();
    expect(b.attr).toHaveBeenCalled();
    expect(g.removeClass).toHaveBeenCalled();
    expect(g.find).toHaveBeenCalled();
    expect(g.attr).toHaveBeenCalled();
    expect(e).toHaveBeenCalled();
  });

  // Test case 2: Testing if the function handles null and undefined input properly
  test('f function handles null and undefined input properly', () => {
    // Call the function with null and undefined input
    f.call({ $element: null }, undefined, null);

    // Check if the necessary methods and functions were not called
    expect(b.addClass).not.toHaveBeenCalled();
    expect(b.removeClass).not.toHaveBeenCalled();
    expect(b.parent).not.toHaveBeenCalled();
    expect(b.find).not.toHaveBeenCalled();
    expect(b.closest).not.toHaveBeenCalled();
    expect(b.attr).not.toHaveBeenCalled();
    expect(g.removeClass).not.toHaveBeenCalled();
    expect(g.find).not.toHaveBeenCalled();
    expect(g.attr).not.toHaveBeenCalled();
    expect(e).not.toHaveBeenCalled();
  });
});
