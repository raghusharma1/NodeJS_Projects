// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min.js');

// Test Suite for function f
describe('Function f', () => {

  // Mock dependencies
  let mockElement = {
    removeClass: jest.fn().mockReturnThis(),
    find: jest.fn().mockReturnThis(),
    end: jest.fn().mockReturnThis(),
    attr: jest.fn().mockReturnThis(),
    addClass: jest.fn().mockReturnThis(),
    parent: jest.fn().mockReturnThis(),
    closest: jest.fn().mockReturnThis(),
    height: jest.fn().mockReturnThis()
  };

  let mockFunction = jest.fn();

  beforeAll(() => {
    global.g = mockElement;
    global.b = mockElement;
    global.e = mockFunction;
  });

  // Reset the mock functions
  beforeEach(() => {
    jest.clearAllMocks();
  });

  // Test Case 1: Check if all the methods are called correctly
  test('should call all the methods correctly', () => {
    f();
    expect(mockElement.removeClass).toHaveBeenCalledTimes(3);
    expect(mockElement.find).toHaveBeenCalledTimes(3);
    expect(mockElement.end).toHaveBeenCalledTimes(2);
    expect(mockElement.attr).toHaveBeenCalledTimes(3);
    expect(mockElement.addClass).toHaveBeenCalledTimes(3);
    expect(mockElement.parent).toHaveBeenCalledTimes(1);
    expect(mockElement.closest).toHaveBeenCalledTimes(1);
    expect(mockFunction).toHaveBeenCalledTimes(1);
  });

  // Test Case 2: Check if 'removeClass' is called with correct arguments
  test('should call removeClass with correct arguments', () => {
    f();
    expect(mockElement.removeClass).toHaveBeenCalledWith('active');
    expect(mockElement.removeClass).toHaveBeenCalledWith('fade');
    expect(mockElement.removeClass).toHaveBeenCalledWith('in');
  });

  // Test Case 3: Check if 'addClass' is called with correct arguments
  test('should call addClass with correct arguments', () => {
    f();
    expect(mockElement.addClass).toHaveBeenCalledWith('active');
    expect(mockElement.addClass).toHaveBeenCalledWith('in');
  });

  // Test Case 4: Check if 'attr' is called with correct arguments
  test('should call attr with correct arguments', () => {
    f();
    expect(mockElement.attr).toHaveBeenCalledWith('aria-expanded', false);
    expect(mockElement.attr).toHaveBeenCalledWith('aria-expanded', true);
  });

});
