// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min.js');

describe('Test suite for function f', () => {

  // Mocking dependencies
  let g = { removeClass: jest.fn().mockReturnThis(), find: jest.fn().mockReturnThis() };
  let b = { addClass: jest.fn().mockReturnThis(), removeClass: jest.fn().mockReturnThis(), parent: jest.fn().mockReturnThis(), closest: jest.fn().mockReturnThis() };
  let e = jest.fn();

  beforeEach(() => {
    g.removeClass.mockClear();
    g.find.mockClear();
    b.addClass.mockClear();
    b.removeClass.mockClear();
    b.parent.mockClear();
    b.closest.mockClear();
    e.mockClear();
  });

  test('Function f should correctly call the dependencies', () => {
    f.call({ $element: b }, g, e);
    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.removeClass).toHaveBeenCalledWith('fade');
    expect(b.parent).toHaveBeenCalledWith('.dropdown-menu');
    expect(b.closest).toHaveBeenCalledWith('li.dropdown');
    expect(e).toHaveBeenCalled();
  });

  test('Function f should correctly handle the absence of dependencies', () => {
    f.call({ $element: null }, null, null);
    expect(g.removeClass).not.toHaveBeenCalled();
    expect(g.find).not.toHaveBeenCalled();
    expect(b.addClass).not.toHaveBeenCalled();
    expect(b.removeClass).not.toHaveBeenCalled();
    expect(b.parent).not.toHaveBeenCalled();
    expect(b.closest).not.toHaveBeenCalled();
    expect(e).not.toHaveBeenCalled();
  });

});
