// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min');

// Test suite for function f
describe('Testing f function in bootstrap.min.js', () => {
  let g, b, e;

  // beforeEach function to initialize required variables and dependencies
  beforeEach(() => {
    g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      end: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };
    b = {
      ...g,
      addClass: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
    };
    e = jest.fn();
  });

  // Test case 1: Check if g.removeClass is called with the correct arguments
  test('Check if g.removeClass is called with correct arguments', () => {
    f.call({ $element: b, getState: () => true }, g, e);
    expect(g.removeClass).toHaveBeenCalledWith('active');
  });

  // Test case 2: Check if b.addClass is called with the correct arguments
  test('Check if b.addClass is called with correct arguments', () => {
    f.call({ $element: b, getState: () => true }, g, e);
    expect(b.addClass).toHaveBeenCalledWith('active');
  });

  // Test case 3: Check if e function is called
  test('Check if e function is called', () => {
    f.call({ $element: b, getState: () => true }, g, e);
    expect(e).toHaveBeenCalled();
  });

  // Test case 4: Check if b.removeClass is called when getState returns false
  test('Check if b.removeClass is called when getState returns false', () => {
    f.call({ $element: b, getState: () => false }, g, e);
    expect(b.removeClass).toHaveBeenCalledWith('fade');
  });
});
