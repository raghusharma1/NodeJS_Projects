// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min');

// Test suite for function f
describe('Testing f function in bootstrap.min.js', () => {
  let g, b, e, h;

  // Setting up the preconditions before each test
  beforeEach(() => {
    g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };

    b = {
      addClass: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
      offsetWidth: 0,
    };

    e = jest.fn();
    h = false;
  });

  // Test case 1
  test('f function should correctly manipulate the classes and attributes of g and b', () => {
    f();

    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.removeClass).toHaveBeenCalledWith('fade');
    expect(b.find).toHaveBeenCalledWith('[data-toggle="tab"]');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(e).not.toHaveBeenCalled();
  });

  // Test case 2
  test('f function should correctly manipulate the classes and attributes of g and b when h is true', () => {
    h = true;
    b.offsetWidth = 100;

    f();

    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.addClass).toHaveBeenCalledWith('in');
    expect(b.find).toHaveBeenCalledWith('[data-toggle="tab"]');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(e).not.toHaveBeenCalled();
  });

  // Test case 3
  test('f function should correctly manipulate the classes and attributes of g and b and call e when e is defined', () => {
    e = jest.fn();

    f();

    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.removeClass).toHaveBeenCalledWith('fade');
    expect(b.find).toHaveBeenCalledWith('[data-toggle="tab"]');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(e).toHaveBeenCalled();
  });
});
