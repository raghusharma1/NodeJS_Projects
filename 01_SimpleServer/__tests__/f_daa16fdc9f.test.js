// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing necessary modules
const $ = require('jquery');
global.$ = $;
const bootstrap = require('../js/bootstrap.min.js');

describe('Bootstrap Min Function', () => {
  let b, g, e;

  beforeEach(() => {
    // Create some mock jQuery elements
    b = $(`<div class="dropdown-menu"></div>`);
    g = $(`<div class="active"></div>`);
    e = jest.fn();

    // Mock the jQuery functions that are used in the function
    $.fn.removeClass = jest.fn().mockReturnValue(this);
    $.fn.find = jest.fn().mockReturnValue(this);
    $.fn.end = jest.fn().mockReturnValue(this);
    $.fn.attr = jest.fn().mockReturnValue(this);
    $.fn.addClass = jest.fn().mockReturnValue(this);
    $.fn.parent = jest.fn().mockReturnValue(this);
    $.fn.closest = jest.fn().mockReturnValue(this);
  });

  test('should remove "active" class from g and add it to b', () => {
    bootstrap.f.call({ $element: b, $target: g, e });

    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(b.addClass).toHaveBeenCalledWith('active');
  });

  test('should set "aria-expanded" attribute to false for g and true for b', () => {
    bootstrap.f.call({ $element: b, $target: g, e });

    expect(g.attr).toHaveBeenCalledWith('aria-expanded', false);
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
  });

  test('should call function e if it is defined', () => {
    bootstrap.f.call({ $element: b, $target: g, e });

    expect(e).toHaveBeenCalled();
  });

  test('should not call function e if it is not defined', () => {
    e = undefined;
    bootstrap.f.call({ $element: b, $target: g, e });

    expect(e).toBeUndefined();
  });
});
