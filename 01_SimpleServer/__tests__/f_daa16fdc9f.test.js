// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Import the necessary dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Test suite for the 'f' function
describe('Function f', () => {
    let b, g, e;
    
    // Set up the necessary preconditions before each test
    beforeEach(() => {
        // Mock the required objects and their methods
        b = {
            addClass: jest.fn(),
            removeClass: jest.fn(),
            parent: jest.fn().mockReturnValue({
                find: jest.fn().mockReturnValue({
                    attr: jest.fn()
                })
            }),
            closest: jest.fn().mockReturnValue({
                addClass: jest.fn()
            }),
            find: jest.fn().mockReturnValue({
                attr: jest.fn()
            })
        };

        g = {
            removeClass: jest.fn().mockReturnValue({
                find: jest.fn().mockReturnValue({
                    removeClass: jest.fn().mockReturnValue({
                        end: jest.fn().mockReturnValue({
                            attr: jest.fn()
                        })
                    })
                })
            })
        };

        e = jest.fn();
    });

    // Test case 1: Check that the function correctly modifies the 'b' and 'g' objects
    test('should correctly modify the b and g objects', () => {
        // Execute the function with the mock objects
        bootstrap.f(b, g, e);

        // Check that the methods of the 'b' and 'g' objects were called with the correct arguments
        expect(b.addClass).toHaveBeenCalledWith('active');
        expect(b.removeClass).toHaveBeenCalledWith('fade');
        expect(b.parent).toHaveBeenCalled();
        expect(b.closest).toHaveBeenCalled();
        expect(b.find).toHaveBeenCalledWith('[data-toggle="tab"]');
        expect(g.removeClass).toHaveBeenCalledWith('active');
        expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
        expect(e).toHaveBeenCalled();
    });

    // Test case 2: Check that the function correctly handles a null 'e' function
    test('should correctly handle a null e function', () => {
        // Execute the function with a null 'e' function
        bootstrap.f(b, g, null);

        // Check that the methods of the 'b' and 'g' objects were called with the correct arguments
        expect(b.addClass).toHaveBeenCalledWith('active');
        expect(b.removeClass).toHaveBeenCalledWith('fade');
        expect(b.parent).toHaveBeenCalled();
        expect(b.closest).toHaveBeenCalled();
        expect(b.find).toHaveBeenCalledWith('[data-toggle="tab"]');
        expect(g.removeClass).toHaveBeenCalledWith('active');
        expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');

        // Check that the 'e' function was not called
        expect(e).not.toHaveBeenCalled();
    });
});
