// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Import the necessary dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Test suite for the 'f' function
describe('Function f', () => {
    let b, e, g;

    // Set up the necessary preconditions before each test
    beforeEach(() => {
        b = {
            addClass: jest.fn(),
            removeClass: jest.fn(),
            find: jest.fn(),
            attr: jest.fn(),
            parent: jest.fn(),
            closest: jest.fn()
        };

        e = jest.fn();

        g = {
            removeClass: jest.fn(),
            find: jest.fn()
        };
    });

    // Test case 1: Check if the 'removeClass' method is called on 'g'
    test('should call removeClass method on g', () => {
        bootstrap.f.call({$element: b}, g, e);
        expect(g.removeClass).toHaveBeenCalled();
    });

    // Test case 2: Check if the 'addClass' method is called on 'b'
    test('should call addClass method on b', () => {
        bootstrap.f.call({$element: b}, g, e);
        expect(b.addClass).toHaveBeenCalled();
    });

    // Test case 3: Check if the 'e' function is called
    test('should call e function', () => {
        bootstrap.f.call({$element: b}, g, e);
        expect(e).toHaveBeenCalled();
    });
});
