// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
const f = require('../js/bootstrap.min.js');

describe('Test suite for function f', () => {
    let g, b, h, e;

    beforeEach(() => {
        g = {
            removeClass: jest.fn().mockReturnThis(),
            find: jest.fn().mockReturnThis(),
            attr: jest.fn().mockReturnThis(),
            end: jest.fn().mockReturnThis(),
        };
        b = {
            addClass: jest.fn().mockReturnThis(),
            removeClass: jest.fn().mockReturnThis(),
            find: jest.fn().mockReturnThis(),
            attr: jest.fn().mockReturnThis(),
            parent: jest.fn().mockReturnThis(),
            closest: jest.fn().mockReturnThis(),
        };
        h = true;
        e = jest.fn();
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    test('Function f should be defined', () => {
        expect(f).toBeDefined();
    });

    test('Function f should be called with correct parameters', () => {
        f();

        expect(g.removeClass).toHaveBeenCalledWith('active');
        expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
        expect(b.addClass).toHaveBeenCalledWith('active');
        expect(h).toBe(true);
        expect(e).toHaveBeenCalled();
    });

    test('Function f should handle error correctly', () => {
        g.removeClass.mockImplementation(() => {
            throw new Error('Test error');
        });

        try {
            f();
        } catch (error) {
            expect(error).toEqual(new Error('Test error'));
        }
    });
});
