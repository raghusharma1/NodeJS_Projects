// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min.js');

describe('Test suite for function f', () => {

  // Mocking dependencies
  let mockElement = {
    removeClass: jest.fn().mockReturnThis(),
    find: jest.fn().mockReturnThis(),
    end: jest.fn().mockReturnThis(),
    addClass: jest.fn().mockReturnThis(),
    attr: jest.fn().mockReturnThis(),
    parent: jest.fn().mockReturnThis(),
    closest: jest.fn().mockReturnThis(),
    height: jest.fn().mockReturnValue(100),
  };

  let mockCallback = jest.fn();

  beforeAll(() => {
    // Mocking global variables
    global.b = mockElement;
    global.g = mockElement;
    global.e = mockCallback;
    global.h = true;
  });

  test('should call removeClass on g with "active" argument', () => {
    f();
    expect(g.removeClass).toHaveBeenCalledWith('active');
  });

  test('should call addClass on b with "active" argument', () => {
    f();
    expect(b.addClass).toHaveBeenCalledWith('active');
  });

  test('should call attr on dropdown-menu with "aria-expanded" and false', () => {
    f();
    expect(mockElement.attr).toHaveBeenCalledWith('aria-expanded', false);
  });

  test('should call attr on dropdown-menu with "aria-expanded" and true', () => {
    f();
    expect(mockElement.attr).toHaveBeenCalledWith('aria-expanded', true);
  });

  test('should call callback function e', () => {
    f();
    expect(e).toHaveBeenCalled();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

});
