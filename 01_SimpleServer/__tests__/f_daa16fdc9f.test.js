// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min.js');

// Test Suite for function f
describe('Function f', () => {

  // Setup common variables or environment before each test
  beforeEach(() => {
    document.body.innerHTML = `<div id="element"></div>`;
    global.g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      end: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };
    global.b = {
      addClass: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };
    global.e = jest.fn();
    global.h = false;
  });

  // Test Case 1: Check if the function calls the necessary methods
  test('should call necessary methods', () => {
    f();
    expect(global.g.removeClass).toHaveBeenCalled();
    expect(global.g.find).toHaveBeenCalled();
    expect(global.g.end).toHaveBeenCalled();
    expect(global.g.attr).toHaveBeenCalled();
    expect(global.b.addClass).toHaveBeenCalled();
    expect(global.b.removeClass).toHaveBeenCalled();
    expect(global.b.parent).toHaveBeenCalled();
    expect(global.b.closest).toHaveBeenCalled();
    expect(global.b.find).toHaveBeenCalled();
    expect(global.b.attr).toHaveBeenCalled();
    expect(global.e).toHaveBeenCalled();
  });

  // Test Case 2: Check if the function behaves correctly when h is true
  test('should behave correctly when h is true', () => {
    global.h = true;
    f();
    expect(global.b.addClass).toHaveBeenCalledWith('in');
  });
});
