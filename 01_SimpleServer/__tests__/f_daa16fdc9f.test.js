// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
const { f } = require('../js/bootstrap.min.js');

describe('bootstrap.min.js', () => {

  let g, b, e, h;

  beforeEach(() => {
    g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      end: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };

    b = {
      addClass: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
    };

    e = jest.fn();
    h = true;
  });

  test('should call the appropriate methods on g and b', () => {
    global.g = g;
    global.b = b;
    global.e = e;
    global.h = h;

    f();

    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.attr).toHaveBeenCalledWith('data-toggle', 'tab', false);
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.attr).toHaveBeenCalledWith('data-toggle', 'tab', true);
    expect(b.removeClass).toHaveBeenCalledWith('fade');
    expect(b.parent).toHaveBeenCalledWith('.dropdown-menu');
    expect(b.closest).toHaveBeenCalledWith('li.dropdown');
    expect(e).toHaveBeenCalled();
  });

  test('should not remove "fade" class from b when h is false', () => {
    global.h = false;

    f();

    expect(b.removeClass).not.toHaveBeenCalledWith('fade');
  });
});
