// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Import the necessary dependencies
const { f } = require('../js/bootstrap.min.js');

// Create a test suite for the function
describe('Testing the f function in bootstrap.min.js', () => {

  // This will run before each test within this suite
  beforeEach(() => {
    // Initialize or reset any necessary variables or state
    g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      end: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis()
    };
    b = {
      addClass: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis()
    };
    h = true;
    e = jest.fn();
  });

  test('Should correctly manipulate classes and attributes', () => {
    // Call the function
    f();

    // Assert that the correct functions were called with the expected arguments
    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.attr).toHaveBeenCalledWith('aria-expanded', false);
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(b.closest).toHaveBeenCalledWith('li.dropdown');
    expect(e).toHaveBeenCalled();
  });

  test('Should handle h being false', () => {
    // Set h to false
    h = false;

    // Call the function
    f();

    // Assert that b.removeClass was called with 'fade'
    expect(b.removeClass).toHaveBeenCalledWith('fade');
  });
});
