// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Import the required dependencies
const bootstrap = require('../js/bootstrap.min.js');

// Test suite for the f function
describe('Test suite for function f', () => {
  let g, b, e;

  // Setup before each test
  beforeEach(() => {
    g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      end: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis()
    };

    b = {
      addClass: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis()
    };

    e = jest.fn();
  });

  // Test case 1: Check if the correct methods are called when h is true
  test('Check if the correct methods are called when h is true', () => {
    bootstrap.f(g, b, true, e);

    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.end).toHaveBeenCalled();
    expect(g.attr).toHaveBeenCalledWith('aria-expanded', false);

    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.removeClass).toHaveBeenCalledWith('fade');
    expect(b.find).toHaveBeenCalledWith('[data-toggle="tab"]');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(b.parent).toHaveBeenCalledWith('.dropdown-menu');
    expect(b.closest).toHaveBeenCalledWith('li.dropdown');

    expect(e).toHaveBeenCalled();
  });

  // Test case 2: Check if the correct methods are called when h is false
  test('Check if the correct methods are called when h is false', () => {
    bootstrap.f(g, b, false, e);

    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.end).toHaveBeenCalled();
    expect(g.attr).toHaveBeenCalledWith('aria-expanded', false);

    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.removeClass).not.toHaveBeenCalled();
    expect(b.find).toHaveBeenCalledWith('[data-toggle="tab"]');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(b.parent).toHaveBeenCalledWith('.dropdown-menu');
    expect(b.closest).toHaveBeenCalledWith('li.dropdown');

    expect(e).toHaveBeenCalled();
  });
});
