// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Import the dependencies for testing
const f = require('../js/bootstrap.min.js');

// Start test suite
describe('Test the f method in bootstrap.min.js', () => {

    // Test cases
    test('Check if the function f exists', () => {
        expect(f).toBeDefined();
    });

    test('Check if the function f is a function', () => {
        expect(typeof f).toBe('function');
    });

    test('Check if the function f performs operations correctly', () => {
        // Mock the dependencies of function f
        const g = {
            removeClass: jest.fn().mockReturnThis(),
            find: jest.fn().mockReturnThis(),
            end: jest.fn().mockReturnThis(),
            attr: jest.fn()
        };
        const b = {
            addClass: jest.fn().mockReturnThis(),
            removeClass: jest.fn().mockReturnThis(),
            parent: jest.fn().mockReturnThis(),
            closest: jest.fn().mockReturnThis(),
            find: jest.fn().mockReturnThis(),
            attr: jest.fn()
        };
        const e = jest.fn();
        const h = true;

        // Call the function with the mocked dependencies
        f(g, b, h, e);

        // Check if the dependencies methods were called correctly
        expect(g.removeClass).toBeCalledWith('active');
        expect(g.find).toBeCalledWith('> .dropdown-menu > .active');
        expect(g.attr).toBeCalledWith('data-toggle', 'tab', false);
        expect(b.addClass).toBeCalledWith('active');
        expect(b.attr).toBeCalledWith('data-toggle', 'tab', true);
        expect(e).toBeCalled();
    });

    test('Check if the function f handles errors correctly', () => {
        // Mock the dependencies of function f
        const g = {
            removeClass: jest.fn().mockImplementation(() => {
                throw new Error('Test error');
            })
        };

        // Expect the function to throw an error
        expect(() => f(g)).toThrow('Test error');
    });
});
