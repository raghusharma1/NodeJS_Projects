// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing required functions and modules
const { f } = require('../js/bootstrap.min');

// Test suite for function f
describe('Testing f function in bootstrap.min.js', () => {
  let b, g, e;

  // beforeEach function to initialize required variables and dependencies
  beforeEach(() => {
    b = {
      addClass: jest.fn(),
      removeClass: jest.fn(),
      find: jest.fn(),
      parent: jest.fn(),
      closest: jest.fn(),
      attr: jest.fn(),
    };
    g = {
      removeClass: jest.fn(),
      find: jest.fn(),
      end: jest.fn(),
    };
    e = jest.fn();
  });

  // Test case for checking the execution of function f
  test('Check execution of function f', () => {
    // Mocking required functions
    b.find.mockReturnValue(b);
    g.find.mockReturnValue(g);
    b.parent.mockReturnValue(b);
    b.closest.mockReturnValue(b);

    // Executing function f
    f();

    // Expectations and assertions
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.end).toHaveBeenCalled();
    expect(e).toHaveBeenCalled();
  });

  // Test case for checking the execution of function f when h is true
  test('Check execution of function f when h is true', () => {
    // Mocking required functions
    b.find.mockReturnValue(b);
    g.find.mockReturnValue(g);
    b.parent.mockReturnValue(b);
    b.closest.mockReturnValue(b);

    // Setting h to true
    const h = true;

    // Executing function f
    f();

    // Expectations and assertions
    expect(b.addClass).toHaveBeenCalledWith('active', 'in');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.end).toHaveBeenCalled();
    expect(e).toHaveBeenCalled();
  });
});
