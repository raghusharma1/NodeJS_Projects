// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Import the function from the bootstrap.min.js module
const f = require('../js/bootstrap.min.js').f;

// Create a test suite for the function
describe('Function f from bootstrap.min.js', () => {
  // Set up any necessary preconditions or clean-up tasks
  beforeEach(() => {
    // Initialize or reset any global variables or states here
  });

  // Write the first test case
  test('should add the "active" class to b and remove it from g', () => {
    // Define the mock elements
    const g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };
    const b = {
      addClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
    };

    // Call the function with the mock elements
    f(g, b);

    // Verify that the correct methods were called on the mock elements
    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(b.addClass).toHaveBeenCalledWith('active');
  });

  // Write the second test case
  test('should handle errors gracefully', () => {
    // Define the mock elements
    const g = {
      removeClass: jest.fn().mockImplementation(() => { throw new Error('Test error'); }),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };
    const b = {
      addClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
    };

    // Call the function with the mock elements
    expect(() => f(g, b)).not.toThrow();
  });
});
