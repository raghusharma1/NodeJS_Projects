// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
const f = require('../bootstrap.min.js').f;

describe('Testing f function in bootstrap.min.js', () => {
  let g, b, e;

  beforeEach(() => {
    g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis()
    };

    b = {
      ...g,
      addClass: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis()
    };

    e = jest.fn();
  });

  test('f function should call appropriate methods on g and b objects', () => {
    f(g, b, e);

    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.attr).toHaveBeenCalledWith('aria-expanded', false);

    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);
    expect(b.removeClass).toHaveBeenCalledWith('fade');
    expect(b.parent).toHaveBeenCalledWith('.dropdown-menu');
    expect(b.closest).toHaveBeenCalledWith('li.dropdown');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);

    expect(e).toHaveBeenCalled();
  });

  test('f function should handle when h is truthy', () => {
    const bWithOffsetWidth = {...b, offsetWidth: 10};
    f(g, bWithOffsetWidth, e, true);

    expect(bWithOffsetWidth.addClass).toHaveBeenCalledWith('in');
  });
});
