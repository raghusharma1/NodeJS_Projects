// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Importing necessary modules
const $ = require('jquery');
global.$ = $;
const bootstrap = require('../js/bootstrap.min.js');

describe('Bootstrap Min Function Tests', () => {
  let b, g, e;

  // Setup before each test
  beforeEach(() => {
    // Initialize test variables
    b = $('<div></div>');
    g = $('<div></div>');
    e = jest.fn();

    // Mock jQuery methods used in function
    $.fn.removeClass = jest.fn().mockReturnThis();
    $.fn.find = jest.fn().mockReturnThis();
    $.fn.end = jest.fn().mockReturnThis();
    $.fn.attr = jest.fn().mockReturnThis();
    $.fn.addClass = jest.fn().mockReturnThis();
    $.fn.parent = jest.fn().mockReturnThis();
    $.fn.closest = jest.fn().mockReturnThis();
  });

  // Test 1: Check if 'removeClass' is called
  test('should call removeClass on variable g', () => {
    bootstrap.f(b, g, e);
    expect(g.removeClass).toHaveBeenCalledWith('active');
  });

  // Test 2: Check if 'addClass' is called on variable b
  test('should call addClass on variable b', () => {
    bootstrap.f(b, g, e);
    expect(b.addClass).toHaveBeenCalledWith('active');
  });

  // Test 3: Check if function e is called
  test('should call function e', () => {
    bootstrap.f(b, g, e);
    expect(e).toHaveBeenCalled();
  });

  // Test 4: Check if 'attr' is called with correct arguments
  test('should call attr with correct arguments', () => {
    bootstrap.f(b, g, e);
    expect($.fn.attr).toHaveBeenCalledWith('aria-expanded', true);
  });
});
