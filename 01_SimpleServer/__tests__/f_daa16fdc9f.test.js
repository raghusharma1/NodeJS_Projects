// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleNodeJSEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=f_14aa59bc21
ROOST_METHOD_SIG_HASH=f_daa16fdc9f


*/

// ********RoostGPT********
// Import the necessary modules
const { f } = require('../js/bootstrap.min.js');

describe('f function', () => {
  let g, b, e;

  // Mock the dependencies
  beforeEach(() => {
    g = {
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      end: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };

    b = {
      addClass: jest.fn().mockReturnThis(),
      removeClass: jest.fn().mockReturnThis(),
      find: jest.fn().mockReturnThis(),
      parent: jest.fn().mockReturnThis(),
      closest: jest.fn().mockReturnThis(),
      attr: jest.fn().mockReturnThis(),
    };

    e = jest.fn();
  });

  afterEach(() => {
    // Clear all mocks after each test
    jest.clearAllMocks();
  });

  it('should call appropriate methods on g and b objects', () => {
    // Call the function
    f();

    // Check the calls on g object
    expect(g.removeClass).toHaveBeenCalledWith('active');
    expect(g.find).toHaveBeenCalledTimes(2);
    expect(g.find).toHaveBeenCalledWith('> .dropdown-menu > .active');
    expect(g.find).toHaveBeenCalledWith('[data-toggle="tab"]');
    expect(g.attr).toHaveBeenCalledWith('aria-expanded', false);

    // Check the calls on b object
    expect(b.addClass).toHaveBeenCalledTimes(2);
    expect(b.addClass).toHaveBeenCalledWith('active');
    expect(b.removeClass).toHaveBeenCalledWith('fade');
    expect(b.find).toHaveBeenCalledWith('[data-toggle="tab"]');
    expect(b.attr).toHaveBeenCalledWith('aria-expanded', true);

    // Check the call on e function
    expect(e).toHaveBeenCalled();
  });
});
